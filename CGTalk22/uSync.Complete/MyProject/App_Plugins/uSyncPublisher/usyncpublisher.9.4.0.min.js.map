{"version":3,"sources":["../../uSyncPublisher/components/uSyncItemBrowser.component.js","../../uSyncPublisher/components/uSyncPublishingAction.component.js","../../uSyncPublisher/components/uSyncPublishResult.component.js","../../uSyncPublisher/components/uSyncReportSummary.component.js","../../uSyncPublisher/components/uSyncSendOption.component.js","../../uSyncPublisher/components/uSyncServerPicker.component.js","../../uSyncPublisher/components/uSyncUserControlledBoolean.component.js","../../uSyncPublisher/dashboard/blank.controller.js","../../uSyncPublisher/dashboard/browser.controller.js","../../uSyncPublisher/dashboard/cache.controller.js","../../uSyncPublisher/dashboard/default.controller.js","../../uSyncPublisher/dashboard/settings.controller.js","../../uSyncPublisher/dashboard/sync.controller.js","../../uSyncPublisher/dialogs/addServer.controller.js","../../uSyncPublisher/dialogs/detail.changes.controller.js","../../uSyncPublisher/dialogs/detail.controller.js","../../uSyncPublisher/dialogs/detail.view.controller.js","../../uSyncPublisher/dialogs/publisherDialog.controller.js","../../uSyncPublisher/dialogs/sideBySide.controller.js","../../uSyncPublisher/overlay/cacheOverlay.controller.js","../../uSyncPublisher/overlay/loader.js","../../uSyncPublisher/overlay/overlay.controller.js","../../uSyncPublisher/overlay/overlay.manager.js","../../uSyncPublisher/pickers/userGroupPicker.controller.js","../../uSyncPublisher/remote/remoteOverlay.controller.js","../../uSyncPublisher/remote/syncSetup.controller.js","../../uSyncPublisher/resources/uSyncPublishAction.manager.js","../../uSyncPublisher/resources/uSyncPublishDialog.manager.js","../../uSyncPublisher/resources/uSyncPublishServer.manager.js","../../uSyncPublisher/server/settings.controller.js","../../uSyncPublisher/serverPicker/picker.controller.js","../../uSyncPublisher/serverPicker/serverPickerDialog.controller.js","../../uSyncPublisher/services/cache.service.js","../../uSyncPublisher/services/publish.service.js","../../uSyncPublisher/services/publishing.service.js","../../uSyncPublisher/backoffice/uSyncPublisher/dashboard.controller.js","../../uSyncPublisher/backoffice/uSyncPublisher/delete.controller.js","../../uSyncPublisher/backoffice/uSyncPublisher/server.controller.js","../../uSyncPublisher/backoffice/uSyncPublisher/sort.controller.js","../../uSyncPublisher/publishers/realtime/complete.controller.js","../../uSyncPublisher/publishers/realtime/configPull.controller.js","../../uSyncPublisher/publishers/realtime/configPush.controller.js","../../uSyncPublisher/publishers/realtime/lang.controller.js","../../uSyncPublisher/publishers/realtime/options.controller.js","../../uSyncPublisher/publishers/realtime/report.controller.js","../../uSyncPublisher/publishers/realtime/result.controller.js","../../uSyncPublisher/publishers/realtime/seed.controller.js","../../uSyncPublisher/publishers/realtime/serverconfig.controller.js"],"names":["uSyncItemBrowserComponent","templateUrl","Umbraco","Sys","ServerVariables","application","applicationPath","bindings","items","selection","loadFolder","loading","server","type","layouts","activeLayout","controllerAs","controller","$scope","editorService","vm","this","onClickItem","item","$event","preventDefault","stopPropagation","selected","alreadySelected","let","i","length","udi","splice","push","localItem","activate","nodes","undefined","height","width","itemDefaultWidth","itemDefaultHeight","aspectRatio","itemMaxWidth","itemMaxHeight","onClickItemName","isFolder","hasChildren","breadcrumb","key","name","onBreadcrumbItem","$index","pos","rootKey","getChangeName","action","changeNames","change","current","openDetail","options","viewFirst","title","view","close","open","openSideBySide","uSyncPublisher","pluginPath","source","localUrl","target","remoteUrl","size","submit","model","selectLayout","layout","forEach","e","active","NoChange","Update","Delete","Create","evts","$watch","newValue","oldValue","_","isArray","$on","angular","module","component","publishingComponent","mode","single","state","actionButton","headings","isModal","hideWhenPicked","$q","mediaResource","contentResource","dictionaryResource","localizationService","languageResource","uSyncHub","uSyncPublishService","uSyncPublishingService","uSyncActionManager","uSyncItemManager","process","error","report","showPickServer","servers","selectedServer","entityType","onSelected","events","flags","prepToggles","description","getDescription","id","emptyGuid","actionAlias","alias","steps","stepIndex","pageNumber","handlerFolder","show","path","primaryType","removeOrphans","includeFileHash","includeSystemFileHash","attributes","cultures","getAction","$broadcast","onClose","clean","then","initComponent","getServers","result","checks","data","checkServer","status","all","url","loadmessage","enabled","hasError","simpleError","message","actionLoaded","request","makePublishRequest","hasView","boxed","unboxView","valid","working","hideClose","showView","hideView","performAction","prepAction","actionName","folder","updateState","response","success","nextAction","nextPage","nextFolder","actions","hasActions","progress","currentStepIndex","currentStepName","n","icon","updateProgressSteps","updateProcess","processComplete","console","log","actionComplete","showError","clientId","$","connection","connectionId","errorTitle","$onInit","promises","serverAlias","getServer","initFlags","requiresFiles","includeFiles","toggle","value","localize","initHub","hub","on","update","blocks","split","calcStep","start","calcPercentage","count","total","publishResultComponent","results","getTypeName","typeName","umbType","substring","lastIndexOf","groupByType","groups","map","newGroup","found","group","itemType","showGroup","unshift","itemCount","changes","changeCount","val","showResult","noChangeList","noChange","join","usyncReportSummaryComponent","stage","getDetailText","verb","purals","summary","create","delete","pending","c","getChangeSummary","usyncSendOptionComponent","option","label","showDisabled","disabled","disabledValue","canToggle","labelString","descriptionString","default","newVal","oldVal","$onDestroy","serverPickerComponent","pickerTitle","hideBox","$timeout","selectServer","unsubscribe","s","titleString","userControlledBooleanComponent","userControlled","startsWith","toggleUser","getToggleValue","indexOf","changeToggle","$location","overlayService","picked","reset","init","doSync","contentType","simple","syncSettings","makeRootItem","syncContent","syncMedia","setup","showSeedPopup","seedUrl","getServerByUrl","showDialog","overlay","subtitle","treeItem","disableBackdropClick","disableEscKey","skipFormValidation","disableSubmitButton","submitButtonLabel","closeButtonLabel","isComplete","moveToNext","emptySite","hasContentOrMedia","stepArgs","complete","typename","empty","variants","showPopup","search","firstsync","appState","uSyncPublishDialogManager","loadPage","pageNum","currentKey","getFolders","local","selectionLabel","page","clear","clearSelection","section","getLocalContentFolders","checkContentItems","updateSelection","getLocalMediaFolders","checkMediaItems","getContentFolders","getMediaFolders","node","any","setLocal","folders","udis","union","pluck","getContentChanges","updateChanges","getMediaChanges","index","findIndex","syncChecked","syncAction","syncChange","refresh","clearsSelectedItems","getSectionState","openDialog","openPublisherPushContent","openPublisherPullContent","openPublisherPushMedia","openPublisherPullMedia","selectLocal","isBlank","onNextPage","onPrevPage","onChangePage","onGotoPage","notificationsService","uSyncCacheService","uSyncSettingManager","getStatus","set","showSettings","settings","uSync","Complete","Caching","Enabled","showAppSettings","JSON","stringify","cacheButtonState","rebuild","content","isRebuilt","confirmRebuild","$rootScope","version","addNew","openNewServerDialog","saved","deploy","gotoSettings","openServerDialog","toggleValue","time","cancel","saveSettings","copyText","range","document","createRange","selectNode","getElementById","window","getSelection","removeAllRanges","addRange","execCommand","addSelf","serverUrl","showHelp","help","hideSubmitButton","getAllServers","_buttons","defaultButton","labelKey","handler","subButtons","openConfigDialog","pullDeploy","getSettings","getVersion","exceptionMessage","uSyncPublishServerManager","saveState","showAdvanced","save","reloadSettings","createKeys","json","copyItem","select","setSelectionRange","userGroupPicker","initPicker","hasAppId","createLocalApiKeys","getPublishers","publishers","quite","add","headline","ExceptionMessage","sendSettings","validation","mandatory","config","allowedServers","allowedPicker","multiPicker","u","pub","find","publisherDescription","$routeParams","checkSettings","entity","uid","openSyncDialog","checkState","trimEnd","checkServerByUrl","Status","checked","showCheck","dialog","placeholder","saveServer","buttonState","template","templates","t","pullEnabled","publisher","publisherConfig","nameChange","toUmbracoAlias","urlChange","setupServer","remoteSetup","getTemplates","assetsService","loadJs","details","detail","oldValueDiff","newValueDiff","oldValueJson","Object","newValueJson","diff","JsDiff","diffWords","pageTitle","eventsService","showServers","hideServerBox","loaded","missing","selectNavigationItem","emit","navigation","$sce","isContent","loadView","getContentEntity","trustAsResourceUrl","remote","getMediaEntity","localMedia","parse","mediaProperty","remoteMedia","showItems","hideItems","ui","button","boxTitle","boxDescription","uSyncDependencyManager","rebuilding","rebuilt","submitButtonState","processRebuild","offset","offsetStyle","transform","calcOffset","cacheTypes","resolve","reject","Title","Icon","Message","Progress","getAllUdis","batches","createBatches","cacheItems","processItems","rebuildEntityType","flush","clearCaches","batchSize","run","uSyncPublishOverlayManager","insertPublishCmds","evt","isSingle","stepAlias","x","factory","mgr","formScope","element","findScope","scope","contentScope","$$childHead","$$nextSibling","contains","allowedActions","some","b","letter","publishToSite","addEllipsis","treeAlias","sectionAlias","getEntity","openPublishDialog","userService","syncGroupList","list","remove","currentSelection","copy","readonly","getUserGroups","userGroups","userGroup","where","getCurrentUser","currentUser","allowedSections","includes","togglePassword","elem","attr","focus","checkSelection","busy","includeAncestors","includeChildren","includeDecendants","deleteMissing","includeDependencies","includeMedia","includeMediaFiles","includeLinked","includeConfig","op","setToggle","hasStepActions","Steps","IsAction","getDialogTitle","Name","getActionMessage","serverName","string","charAt","toUpperCase","slice","capitalizeFirstLetter","mergeResults","targetAction","findWhere","indexOfAction","mergeDependencies","targetDependency","Udi","endsWith","entityResource","navigationService","cb","openPublisherPushItemDialog","openPublisherPullItemDialog","openPublisherPushFileDialog","openPublisherPullFileDialog","callback","hideNavigation","openCompareContent","getById","openCompare","openCompareMedia","dialogTitle","dialogView","dialogOptions","metaData","_syncLocalItem","getLocalItem","assign","done","showSuccessBar","checkServerUrl","disableEscapeKey","username","password","Success","warning","warn","hasContent","hasSettings","hasFiles","toggleContent","toggleSettings","toggleFiles","sortOptions","axis","containment","distance","opacity","tolerance","scroll","cursor","zIndex","pull","$http","cacheService","uSyncComplete","get","toggleCaches","post","publishService","dependencyFlags","deleteServer","user","pass","ids","setServerOrder","order","getDecendentCount","getFlags","checkEnabled","serviceRoot","publisherService","selectItem","dllVersion","syncTree","tree","sync","getJson","docslink","confirm","treeService","currentNode","hideDialog","performDelete","getTreeRoot","removeNode","hideMenu","showClose","errorDesc","Init","checkStatus","checkStatusButton","toLowerCase","getServerError","syncbuttons","forceReload","sortOrder","sortableOptions","helper","children","each","column","reverse","saveButtonState","reloadNode","sort","pvm","includeSystemFiles","flagsValue","docTypes","root","dataTypes","mediaTypes","domains","memberTypes","dictionary","macro","files","systemFiles","languages","protect","media","relationTypes","contentName","toggleItems","keys","toggleMedia","InitOptions","clearAll","selectAll","toggleMode","itemtype","_checked","watchEvent","dateHelper","showtoggle","hideAdvanced","firstItem","showChildren","includeContent","flagValue","actionOptions","flag","shouldShowAdvanced","event","args","releaseDate","releaseDateFormatted","datePickerSetup","instance","flatPickr","datePickerChange","date","serverTime","convertToServerStringTime","moment","serverTimeOffset","getLocalDate","locale","datePickerShow","datePickerClose","clearPublishDate","now","Date","nowFormatted","format","datePickerConfig","enableTime","dateFormat","time_24hr","minDate","defaultDate","showDetails","hasPending","postActions","requiresPostProcessing","hasPostActions","toggleDetails","Change","parent","$parent","emptyString","showAll"],"mappings":"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","file":"usyncpublisher.9.4.0.min.js","sourcesContent":["(function () {\r\n\r\n    'use strict';\r\n\r\n    var uSyncItemBrowserComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncItemBrowser.html',\r\n        bindings: {\r\n            items: '=',\r\n            selection: '=',\r\n            loadFolder: '&',\r\n            loading: '=',\r\n            server: '=',\r\n            type: '@',\r\n            layouts: '=',\r\n            activeLayout: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncBrowserController\r\n    };\r\n\r\n    function uSyncBrowserController($scope, editorService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.onClickItem = onClickItem;\r\n        vm.onClickItemName = onClickItemName;\r\n        vm.onBreadcrumbItem = onBreadcrumbItem;\r\n\r\n        vm.rootKey = '00000000-0000-0000-0000-000000000000';\r\n        vm.breadcrumb = [{ key: vm.rootKey, name: 'Media' }]\r\n\r\n        vm.getChangeName = getChangeName;\r\n\r\n        vm.current = vm.rootKey;\r\n\r\n        vm.openDetail = openDetail;\r\n        vm.openSideBySide = openSideBySide;\r\n\r\n        ///////////// \r\n        vm.selectLayout = selectLayout;\r\n\r\n        function selectLayout(layout) {\r\n            vm.activeLayout = layout;\r\n            vm.layouts.forEach(e => e.active = false);\r\n            layout.active = true;\r\n        };\r\n\r\n\r\n        ///////\r\n        function onBreadcrumbItem(item, $index) {\r\n            if ($index < vm.breadcrumb.length - 1) {\r\n\r\n                // vm.clearSelection();\r\n\r\n                var pos = $index + 1;\r\n                vm.breadcrumb.splice(pos, vm.breadcrumb.length - pos);\r\n\r\n                vm.loadFolder({ key: vm.breadcrumb[vm.breadcrumb.length - 1].key });\r\n            }\r\n        }\r\n\r\n        function onClickItem(item, $event) {\r\n\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n\r\n            item.selected = !item.selected;\r\n\r\n            var alreadySelected = false;\r\n            // selection code.\r\n            for (let i = 0; i < vm.selection.length; i++) {\r\n                if (vm.selection[i].udi == item.udi) {\r\n                    if (item.selected) {\r\n                        alreadySelected = true;\r\n                    }\r\n                    else {\r\n                        vm.selection.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (item.selected && !alreadySelected) {\r\n                vm.selection.push(item.localItem);\r\n            }\r\n        }\r\n\r\n        function onClickItemName(item, $event) {\r\n\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n\r\n            if (item.isFolder && item.hasChildren && vm.loadFolder) {\r\n\r\n                vm.breadcrumb.push({ key: item.key, name: item.name });\r\n                vm.loadFolder({ key: item.key });\r\n\r\n            }\r\n            else {\r\n                onClickItem(item, $event);\r\n            }\r\n        }\r\n\r\n\r\n        /// nicer names for changes in the browser window.\r\n\r\n        vm.changeNames = {\r\n            'NoChange': 'In sync',\r\n            'Update': 'Diffrent',\r\n            'Delete': 'Not on target',\r\n            'Create': 'No on local'\r\n        };\r\n\r\n        function getChangeName(action) {\r\n\r\n            var name = vm.changeNames[action.change];\r\n            if (name == null || name === undefined)\r\n                return action.change;\r\n\r\n            return name;\r\n\r\n        }\r\n\r\n        //// thumbnail making.\r\n\r\n        function activate() {\r\n            for (var i = 0; vm.items.nodes.length > i; i++) {\r\n                setOriginalSize(vm.items.nodes[i]);\r\n            }\r\n        }\r\n\r\n        var itemDefaultHeight = 200;\r\n        var itemDefaultWidth = 200;\r\n        var itemMaxWidth = 200;\r\n        var itemMaxHeight = 200;\r\n\r\n        function setOriginalSize(item) {\r\n\r\n            if (item.height !== undefined && item.width !== undefined) {\r\n                //set to a square by default\r\n                item.width = itemDefaultWidth;\r\n                item.height = itemDefaultHeight;\r\n                item.aspectRatio = 1;\r\n\r\n                item.aspectRatio = item.width / item.height;\r\n\r\n                // set max width and height\r\n                // landscape\r\n                if (item.aspectRatio >= 1) {\r\n                    if (item.width > itemMaxWidth) {\r\n                        item.width = itemMaxWidth;\r\n                        item.height = itemMaxWidth / item.aspectRatio;\r\n                    }\r\n                    // portrait\r\n                } else {\r\n                    if (item.height > itemMaxHeight) {\r\n                        item.height = itemMaxHeight;\r\n                        item.width = itemMaxHeight * item.aspectRatio;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function openDetail(action, $event) {\r\n\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n\r\n            var options = {\r\n                item: action,\r\n                server: vm.server,\r\n                viewFirst: true,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSyncPublisher/dialogs/detail.html\",\r\n                // view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function openSideBySide(item, $event) {\r\n\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n\r\n            editorService.open({\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dialogs/sideBySide.html',\r\n                title: 'Side by Side',\r\n                source: item.localUrl,\r\n                target: item.remoteUrl,\r\n                size: '',\r\n                submit: function (model) {\r\n                    editorService.close();\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n        var evts = [];\r\n        evts.push($scope.$watch('vm.items', function (newValue, oldValue) {\r\n            if (newValue !== undefined && _.isArray(newValue.nodes)) {\r\n                if (newValue.key === vm.rootKey) {\r\n                    vm.breadcrumb = [vm.breadcrumb[0]];\r\n                };\r\n\r\n                activate();\r\n            }\r\n        }));\r\n\r\n        evts.push($scope.$watch('vm.serverName', function (name) {\r\n            if (name !== undefined) {\r\n                vm.breadcrumb[0].name = vm.type + ' [' + name + ']';\r\n\r\n            }\r\n        }));\r\n\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var e in evts) {\r\n                evts[e]();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncItemBrowser', uSyncItemBrowserComponent);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var publishingComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncPublishingAction.html',\r\n        bindings: {\r\n            mode: '<',\r\n            single: '<',\r\n            items: '=',\r\n            options: '=',\r\n            state: '=',\r\n            actionButton: '=',\r\n            headings: '=',\r\n            isModal: '<',\r\n            hideWhenPicked: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: publishingController\r\n    };\r\n\r\n    function publishingController($scope, $q, mediaResource, contentResource, dictionaryResource, localizationService, languageResource,\r\n        uSyncHub, uSyncPublishService, uSyncPublishingService, uSyncActionManager, uSyncItemManager) {\r\n\r\n        var vm = this;\r\n        vm.process = {};\r\n\r\n        vm.error = {};\r\n        vm.report = [];\r\n\r\n        // intialize the button (on parent)\r\n        vm.actionButton = {\r\n            state: 'init', name: 'Send'\r\n        };\r\n\r\n        vm.showPickServer = true; // show the server select dialog.\r\n        vm.servers = [];\r\n        vm.selectedServer = null;\r\n\r\n        vm.entityType = 'content'; // the primary UDI entity\r\n\r\n        // methods \r\n        vm.onSelected = onSelected;\r\n\r\n        // events\r\n        var events = [];\r\n        events.push($scope.$on('usync-publish-performAction', function () {\r\n            onPerformAction();\r\n        }));\r\n\r\n        events.push($scope.$on('usync-publish-close', function () {\r\n            onClose();\r\n        }))\r\n\r\n        //////////////\r\n\r\n        function onSelected(server) {\r\n            vm.flags = uSyncActionManager.prepToggles(server, vm.flags, vm.entityType);\r\n\r\n            vm.headings.description =\r\n                uSyncActionManager.getDescription(vm.mode, vm.entityType, server.name);\r\n\r\n            vm.server = server;\r\n\r\n            startProcess();\r\n\r\n            $scope.$broadcast('sync-server-selected', {\r\n                server: server, flags: vm.flags\r\n            });\r\n        }\r\n\r\n        /// triggered when button is pressed on parent. \r\n        function onPerformAction() {\r\n            if (vm.process.view.show) {\r\n                vm.state.actionLoaded = false;\r\n            }\r\n            performAction(vm.process);\r\n        }\r\n\r\n        /// trigged when close is pressed on parent. \r\n        function onClose() {\r\n            clean(vm.process);\r\n        }\r\n\r\n        /////////////\r\n\r\n        ////////////\r\n        /// Controller lifecycle. \r\n\r\n        /// setup\r\n        vm.$onInit = function () {\r\n\r\n            vm.entityType = vm.items[0].entityType // entity type of the item. \r\n\r\n            vm.headings = {\r\n                title: 'Select a server',\r\n                description: vm.mode + ' ' + vm.entityType\r\n            };\r\n\r\n            var promises = [];\r\n\r\n            // no server picked.\r\n            if (vm.options.serverAlias !== undefined) {\r\n                vm.showPickServer = false;\r\n                promises.push(uSyncPublishService.getServer(vm.options.serverAlias)\r\n                    .then(function (result) {\r\n                        vm.selectedServer = result.data;\r\n                    }));\r\n            }\r\n\r\n            $q.all(promises).then(function () {\r\n                vm.flags = uSyncActionManager.initFlags();\r\n\r\n                // override when we are syncing something that needs files.\r\n                if (vm.items[0].requiresFiles) {\r\n                    vm.flags.includeFiles = { toggle: true, value: true };\r\n                }\r\n\r\n                initComponent();\r\n            });\r\n\r\n            localizationService.localize('usyncpublish_' + vm.mode + \"Button\")\r\n                .then(function (data) {\r\n                    vm.actionButton.name = data;\r\n                });\r\n\r\n            initSignalRHub();\r\n        }\r\n\r\n        $scope.$on('destroy', function () {\r\n            for (var e in events) { events[e](); }\r\n        });\r\n\r\n        ///////////////\r\n\r\n\r\n        function initComponent() {\r\n\r\n            var promises = [];\r\n\r\n            if (vm.showPickServer) {\r\n                promises.push(uSyncPublishService.getServers(vm.mode)\r\n                    .then(function (result) {\r\n                        vm.servers = result.data;\r\n                        checkServers(vm.servers);\r\n                        vm.state.loading = false;\r\n                    }));\r\n            }\r\n            else {\r\n                vm.headings.title = 'Checking ' + vm.selectedServer.name + ' server';\r\n                vm.headings.description = 'Contacting ' + vm.selectedServer.url + ' to confirm status';\r\n\r\n                uSyncPublishService.checkServer(vm.selectedServer.alias)\r\n                    .then(function (result) {\r\n                        vm.state.loading = false;\r\n                        vm.state.loadmessage = '';\r\n                        vm.selectedServer.status = result.data;\r\n\r\n                        if (result.data.enabled != true) {\r\n                            vm.state.hasError = true;\r\n                            vm.simpleError = 'Server unreachable \"' + result.data.status + '\" ' + result.data.message;\r\n                        }\r\n                        else {\r\n                            onSelected(vm.selectedServer);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n\r\n        //// utils.\r\n        function checkServers(servers) {\r\n\r\n            var checks = [];\r\n\r\n            servers.forEach(function (server) {\r\n                checks.push(uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n                    }));\r\n            });\r\n\r\n            $q.all(checks).then(function () {\r\n                $scope.$broadcast('usync-servers-checked', servers);\r\n            });\r\n        }\r\n\r\n        // processing \r\n        // loop : getAction -> prepAction - > processAction \r\n\r\n        function startProcess() {\r\n\r\n            vm.process = {\r\n                id: uSyncActionManager.emptyGuid,\r\n                actionAlias: '',\r\n                server: vm.server.alias,\r\n                mode: vm.mode,\r\n                items: vm.items,\r\n                steps: {\r\n                    stepIndex: 0,\r\n                    pageNumber: 0,\r\n                    handlerFolder: '',\r\n                },\r\n                view: {\r\n                    show: false,\r\n                    path: ''\r\n                },\r\n                options: {\r\n                    primaryType: vm.entityType,\r\n                    removeOrphans: false,\r\n                    includeFileHash: false,\r\n                    includeSystemFileHash: false,\r\n                    attributes: {},\r\n                    cultures: []\r\n                }\r\n            };\r\n\r\n            getAction(vm.process);\r\n        }\r\n\r\n        function getAction(process) {\r\n\r\n            vm.state.actionLoaded = false;\r\n\r\n            var request = makePublishRequest(process)\r\n\r\n            uSyncPublishingService.getAction(request)\r\n                .then(function (result) {\r\n                    vm.state.actionLoaded = true;\r\n                    process.action = result.data;\r\n                    prepAction(process);\r\n                });\r\n        }\r\n\r\n        function prepAction(process) {\r\n\r\n            if (process.action === null) { return; }\r\n\r\n            process.actionAlias = process.action.alias;\r\n\r\n            if (hasView(process.action)) {\r\n                return showView(process);\r\n            }\r\n            else {\r\n                hideView(process);\r\n                performAction(process);\r\n            }\r\n        }\r\n\r\n        function hasView(action) {\r\n            return action.view !== undefined && action.view !== null && action.view.length > 0;\r\n        }\r\n\r\n        function showView(process) {\r\n            process.view = {\r\n                show: true,\r\n                path: process.action.view,\r\n                boxed: !process.action.unboxView\r\n            };\r\n\r\n            vm.state.valid = true;\r\n            vm.state.working = false;\r\n            vm.state.hideClose = false;\r\n\r\n            if (vm.showPickServer && vm.hideWhenPicked) {\r\n                vm.showPickServer = false;\r\n                vm.headings = {\r\n                    title: 'Publish to ' + vm.server.name,\r\n                    description: vm.server.url\r\n                };\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        function hideView(process) {\r\n            vm.state.working = true;\r\n            vm.state.hideClose = true;\r\n            process.view = { show: false, path: '' };\r\n        }\r\n\r\n        function performAction(process) {\r\n\r\n            vm.showPickServer = false;\r\n\r\n            updateState(process);\r\n\r\n            var request = makePublishRequest(process);\r\n\r\n            uSyncPublishingService.performAction(request)\r\n                .then(function (result) {\r\n\r\n                    var response = result.data;\r\n                    if (response.success) {\r\n\r\n                        process = updateProcess(process, response);\r\n\r\n                        if (response.processComplete) {\r\n                            console.log('end ?');\r\n                        }\r\n                        else if (response.actionComplete) {\r\n                            getAction(process);\r\n                        }\r\n                        else {\r\n                            performAction(process);\r\n                        }\r\n                    }\r\n                    else {\r\n                        showError(response.error, request);\r\n                    }\r\n                }, function (error) {\r\n                    console.log(error);\r\n                    showError({ title: 'Server error', message: error.data }, request);\r\n                });\r\n        }\r\n\r\n        // updates state - so footer UI can show progress.\r\n        function updateState(process) {\r\n            vm.state.actionName = process.actionAlias;\r\n            vm.state.stepIndex = process.steps.stepIndex;\r\n            vm.state.pageNumber = process.steps.pageNumber;\r\n            vm.state.folder = process.steps.handlerFolder;\r\n        }\r\n\r\n        function makePublishRequest(process) {\r\n            return {\r\n                id: process.id,\r\n                server: process.server,\r\n                mode: process.mode,\r\n                items: process.items,\r\n                actionAlias: process.actionAlias,\r\n\r\n                stepIndex: process.steps.stepIndex,\r\n                handlerFolder: process.steps.handlerFolder,\r\n\r\n                pageNumber: process.steps.pageNumber,\r\n                clientId: getClientId(),\r\n                options: process.options\r\n            }\r\n        }\r\n\r\n        function updateProcess(process, response) {\r\n            process.id = response.id;\r\n            process.actionAlias = response.nextAction;\r\n            process.items = response.items;\r\n            process.steps = {\r\n                stepIndex: response.stepIndex,\r\n                pageNumber: response.nextPage,\r\n                handlerFolder: response.nextFolder\r\n            }\r\n\r\n            if (hasActions(response)) {\r\n                vm.report = response.actions;\r\n            }\r\n\r\n            if (response.progress != null && response.progress != undefined) {\r\n                vm.progress.currentStepIndex = response.progress.currentStepIndex;\r\n                vm.progress.currentStepName = response.progress.currentStepName;\r\n                updateProgressSteps(response.progress.steps);\r\n            }\r\n\r\n            return process;\r\n        }\r\n\r\n        function hasActions(response) {\r\n            return response.actions !== undefined && response.actions !== null && response.actions.length > 0;\r\n        }\r\n\r\n        function updateProgressSteps(steps) {\r\n\r\n            if (_.isArray(steps)) {\r\n                if (vm.progress.steps.length != steps.length) {\r\n                    vm.progress.steps = steps;\r\n                }\r\n\r\n                for (let n = 0; n < steps.length; n++) {\r\n                    if (steps[n].icon != vm.progress.steps[n].icon ||\r\n                        steps[n].name != vm.progress.steps[n].name ||\r\n                        steps[n].status != vm.progress.steps[n].status\r\n                    ) {\r\n                        vm.progress.steps[n] = steps[n];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function clean(process) {\r\n            if (process.id !== undefined && process.id !== null && process.id != uSyncActionManager.emptyGuid) {\r\n                uSyncPublishingService.clean(process.id, process.server)\r\n                    .then(function () { });\r\n            }\r\n        }\r\n\r\n        // progress ui \r\n        // mainly driven by signalR\r\n        vm.progress = {\r\n            steps: [\r\n                { icon: 'icon-settings', name: 'first-step', status: 0 },\r\n                { icon: 'icon-settings', name: 'second-step', status: 0 },\r\n                { icon: 'icon-settings', name: 'third-step', status: 0 }\r\n            ]\r\n        }\r\n\r\n        /// calculate the progress bar. \r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(update) {\r\n            if (update != null && update != undefined) {\r\n                return (update.count / update.total) * 100;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function showError(error, request) {\r\n\r\n            vm.state.hideClose = false;\r\n            vm.state.valid = false;\r\n            vm.state.working = false; \r\n\r\n            vm.state.hasError = true;\r\n            vm.error = error;\r\n            vm.errorTitle = 'Error during ' + request.actionAlias;\r\n        }\r\n\r\n        //////// SignalR\r\n\r\n        function initSignalRHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                    vm.update.blocks = update.message.split('||');\r\n                });\r\n\r\n                vm.hub.on('add', function (status) {\r\n                    vm.status = status;\r\n                });\r\n\r\n                vm.hub.on('publisher', function (message) {\r\n                    vm.message = message;\r\n                    calcStep(vm.message);\r\n                });\r\n\r\n                vm.hub.start(function (result) {\r\n\r\n                });\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncPublishingAction', publishingComponent);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    var publishResultComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncPublishResult.html',\r\n        bindings: {\r\n            results: '<',\r\n            total: '=',\r\n            isModal: '<',\r\n            server: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: publishResultController\r\n    };\r\n\r\n    function publishResultController($scope, editorService) {\r\n\r\n        var vm = this;\r\n\r\n        // public methods\r\n        vm.getTypeName = getTypeName;\r\n        vm.showResult = showResult;\r\n        vm.openDetail = openDetail;\r\n\r\n        // public properties\r\n        vm.groups = [];\r\n        vm.total = 0;\r\n        vm.noChangeList = '';\r\n\r\n        // intialization\r\n        vm.$onInit = function () {\r\n            vm.groups = groupByType(vm.results);\r\n            vm.total = totalChanges();\r\n        };\r\n\r\n\r\n        function openDetail(item) {\r\n\r\n            if (!vm.isModal) {\r\n                var options = {\r\n                    item: item,\r\n                    server: vm.server,\r\n                    title: 'uSync Change',\r\n                    // view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                     view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSyncPublisher/dialogs/detail.html\",\r\n                    close: function () {\r\n                        editorService.close();\r\n                    }\r\n                };\r\n                editorService.open(options);\r\n            }\r\n            else {\r\n                // if its model, we show the results inline. \r\n                item.show = !item.show;\r\n            }\r\n        }\r\n\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            return umbType[0] == 'I' ? umbType.substring(1) : umbType;\r\n        }\r\n\r\n        function groupByType(results) {\r\n\r\n            var groups = [];\r\n\r\n            results.map(function (item) {\r\n                var found = false;\r\n\r\n                groups.map(function (group) {\r\n                    if (group.type === item.itemType) {\r\n                        group.items.push(item);\r\n                        found = true;\r\n                    }\r\n                });\r\n\r\n                if (!found) {\r\n                    var newGroup = {\r\n                        type: item.itemType,\r\n                        name: getTypeName(item.itemType),\r\n                        items: [],\r\n                        showGroup: false\r\n                    };\r\n                        \r\n                    newGroup.items.push(item);\r\n                    groups.unshift(newGroup);\r\n                }\r\n            });\r\n\r\n            for (let i = 0; i < groups.length; i++) {\r\n                groups[i].itemCount = itemCount(groups[i].items);\r\n                groups[i].changes = changeCount(groups[i].items);\r\n            }\r\n\r\n            if (groups.length > 0) {\r\n                groups[0].showGroup = true;\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        function itemCount(results) {\r\n\r\n            var count = 0;\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].change !== 'Clean') {\r\n                    count++;\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n\r\n        function totalChanges() {\r\n            var total = 0;\r\n            var noChange = [];\r\n            angular.forEach(vm.groups, function (group, key) {\r\n                var changes = changeCount(group.items);\r\n                total += changes;\r\n\r\n                if (changes === 0) {\r\n                    var item = group.name[group.name.length - 1] === 'e' ? group.name + 's' : group.name;\r\n                    noChange.push(item + ' (' + group.items.length + ')');\r\n                }\r\n            });\r\n\r\n            vm.noChangeList = noChange.join(', ');\r\n\r\n            return total;\r\n        }\r\n\r\n        function changeCount(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange' && val.change !== 'Clean') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n\r\n        function showResult(result) {\r\n            return result.change !== 'Clean' && result.change !== 'NoChange';\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncPublishResultView', publishResultComponent);\r\n})();","(function () {\r\n\r\n    var usyncReportSummaryComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncReportSummary.html',\r\n        bindings: {\r\n            results: '=',\r\n            stage: '<',\r\n            toggle: '=',\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: reportSummaryController\r\n    };\r\n\r\n    function reportSummaryController() {\r\n\r\n        var vm = this;\r\n        vm.getDetailText = getDetailText;\r\n\r\n        vm.$onInit = function () {\r\n            vm.summary = getChangeSummary(vm.results);\r\n        }\r\n\r\n        function getChangeSummary(results) {\r\n\r\n            var summary = {\r\n                total: results.length,\r\n                changes: 0,\r\n                update: 0,\r\n                create: 0,\r\n                delete: 0,\r\n                pending: 0\r\n            };\r\n\r\n            for (let c = 0; c < results.length; c++) {\r\n                switch (results[c].change) {\r\n                    case 'NoChange':\r\n                        break;\r\n                    case 'Update':\r\n                    case 'Import':\r\n                        summary.update++;\r\n                        break;\r\n                    case 'Delete':\r\n                        summary.delete++;\r\n                        break;\r\n                    case 'Create':\r\n                        summary.create++;\r\n                        break;\r\n                    case 'WillChange':\r\n                        summary.pending++;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            summary.changes = summary.update + summary.delete + summary.create;\r\n\r\n            return summary;\r\n        }\r\n\r\n\r\n        function getDetailText(changes, verb) {\r\n\r\n            var purals = changes == 1 ? 'item' : 'items';\r\n\r\n            \r\n\r\n            if (vm.stage == 'report') {\r\n                \r\n                return changes + ' ' + purals + ' will be ' + verb;\r\n            }\r\n            else {\r\n                var tense = changes == 1 ? ' was ' : ' were ';\r\n                return changes + ' ' + purals + tense + verb;   \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportSummary', usyncReportSummaryComponent);\r\n\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var usyncSendOptionComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncSendOption.html',\r\n        bindings: {\r\n            option: '=',\r\n            label: '@',\r\n            description: '@',\r\n            showDisabled: '<',\r\n            disabled: '=',\r\n            disabledValue: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: sendOptionController\r\n    };\r\n\r\n    function sendOptionController($scope, localizationService) {\r\n\r\n        var vm = this;\r\n        vm.canToggle = canToggle;\r\n        vm.toggle = toggle;\r\n\r\n\r\n        vm.$onInit = function () {\r\n            localize();\r\n            vm.default = vm.option.value;\r\n        }\r\n\r\n        var evts = [];\r\n\r\n        evts.push($scope.$watch('vm.disabled', function (newVal, oldVal) {\r\n            if (newVal !== undefined) {\r\n                if (newVal === true) {\r\n                    vm.default = vm.option.value;\r\n                    vm.option.value = vm.disabledValue;\r\n                }\r\n                else {\r\n                    vm.option.value = vm.default;\r\n                }\r\n            }\r\n        }));\r\n\r\n        vm.$onDestroy = function () {\r\n            for (var e in evts) {\r\n                evts[e]();\r\n            }\r\n        };\r\n\r\n        function canToggle(option) {\r\n            return option.toggle;\r\n        }\r\n\r\n        function toggle(option) {\r\n            if (option.toggle) {\r\n                option.value = !option.value;\r\n            }\r\n        }\r\n\r\n        function localize() {\r\n\r\n            if (vm.label && vm.label[0] === '@') {\r\n                localizationService.localize(vm.label.substring(1))\r\n                    .then(function (data) {\r\n                        vm.labelString = data;\r\n                    });\r\n            }\r\n            else {\r\n                vm.labelString = vm.label;\r\n            }\r\n\r\n            if (vm.description && vm.description[0] === '@') {\r\n                localizationService.localize(vm.description.substring(1))\r\n                    .then(function (data) {\r\n                        vm.descriptionString = data;\r\n                    });\r\n            }\r\n            else {\r\n                vm.descriptionString = vm.description;\r\n            }\r\n        }   \r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncSendOption', usyncSendOptionComponent);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var serverPickerComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncServerPicker.html',\r\n        bindings: {\r\n            pickerTitle: '@',\r\n            description: '@',\r\n            servers: '<',\r\n            onSelected: '&',\r\n            hideBox: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: serverPickerController\r\n    };\r\n\r\n    function serverPickerController($scope, $timeout, localizationService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectServer = selectServer;\r\n        var unsubscribe = [];\r\n\r\n        vm.$onInit = function () {\r\n            localize();\r\n\r\n            if (vm.hideBox === undefined) {\r\n                vm.hideBox = false;\r\n            }\r\n\r\n            $timeout(check(), 500);\r\n        };\r\n\r\n        vm.$onDestroy = function () {\r\n            for (var e in unsubscribe) {\r\n                unsubscribe[e]();\r\n            }\r\n        };\r\n            \r\n        function check() {\r\n\r\n            unsubscribe.push($scope.$on('usync-servers-checked', function (e, servers) {\r\n                if (servers.length === 1) {\r\n                    selectServer(servers[0]);\r\n                }\r\n            }));\r\n\r\n            if (vm.servers.length === 1) {\r\n                selectServer(vm.servers[0]);\r\n            }\r\n        }\r\n\r\n        function selectServer(server) {\r\n            if (server.status === undefined || server.status.enabled !== true) {\r\n                return;\r\n            }\r\n\r\n            for (let s = 0; s < vm.servers.length; s++) {\r\n                vm.servers[s].selected = false;\r\n            }\r\n            server.selected = true;\r\n\r\n            if (vm.onSelected) {\r\n                vm.onSelected({ server: server });\r\n            }\r\n        }\r\n\r\n\r\n        function localize() {\r\n\r\n            if (vm.pickerTitle && vm.pickerTitle[0] === '@') {\r\n                localizationService.localize(vm.pickerTitle.substring(1))\r\n                    .then(function (data) {\r\n                        vm.titleString = data;\r\n                    });\r\n            }\r\n            else {\r\n                vm.titleString = vm.pickerTitle;\r\n            }\r\n\r\n            if (vm.description && vm.description[0] === '@') {\r\n                localizationService.localize(vm.description.substring(1))\r\n                    .then(function (data) {\r\n                        vm.descriptionString = data;\r\n                    });\r\n            }\r\n            else {\r\n                vm.descriptionString = vm.description;\r\n            }\r\n        }   \r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncServerPicker', serverPickerComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var userControlledBooleanComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncPublisher/components/uSyncUserControlledBoolean.html',\r\n        bindings: {\r\n            option: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: userControlledBooleanController\r\n\r\n    };\r\n\r\n    function userControlledBooleanController($scope) {\r\n\r\n        var vm = this;\r\n        vm.userControlled = userControlled;\r\n        vm.toggleUser = toggleUser;\r\n\r\n        // workout what the toggle is.\r\n        if (vm.option !== undefined) {\r\n            vm.getToggleValue(vm.option);\r\n        }\r\n        else {\r\n            $scope.$watch('vm.option', function (newValue) {\r\n                if (vm.toggle === undefined && newValue !== undefined) {\r\n                    vm.toggle = getToggleValue(newValue);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getToggleValue(value) {\r\n            return value.substring(value.indexOf('-') + 1) === 'yes';\r\n        }\r\n     \r\n        vm.changeToggle = changeToggle;\r\n        function changeToggle(model) {\r\n            if (model) {\r\n                vm.option = vm.option.substring(0, vm.option.indexOf('-') + 1) + 'yes';\r\n            }\r\n            else {\r\n                vm.option = vm.option.substring(0, vm.option.indexOf('-') + 1) + 'no';\r\n            }\r\n        }\r\n\r\n        function toggleUser() {\r\n            if (vm.option === undefined) {\r\n                vm.option = 'user-yes';\r\n            }\r\n\r\n            else if (vm.option.startsWith('user-'))\r\n            {\r\n                vm.option = vm.option.substring(5);\r\n            }\r\n            else {\r\n                vm.option = 'user-' + vm.option;\r\n            }\r\n        }\r\n\r\n        function userControlled() {            \r\n            return vm.option !== undefined && vm.option.startsWith('user-');\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncUserControlledBoolean', userControlledBooleanComponent);\r\n})();","(function () {\r\n    'use static';\r\n\r\n\r\n    function blankDashboardController($scope,\r\n        $location, overlayService,\r\n        uSyncPublishService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.onSelected = onSelected;\r\n        vm.performAction = performAction;\r\n        vm.reset = reset;\r\n\r\n        vm.doSync = doSync;\r\n\r\n        var emptyGuid = '00000000-0000-0000-0000-000000000000';\r\n        vm.mode = 'settingsPull';\r\n\r\n        vm.showPopup = false;\r\n        if ($location.search().firstsync !== undefined) {\r\n            vm.showPopup = $location.search().firstsync == 'true';\r\n        }\r\n\r\n        ///////////\r\n        vm.showSeedPopup = showSeedPopup;\r\n        vm.showDialog = showDialog;\r\n\r\n        if (vm.showPopup) {\r\n            showSeedPopup();\r\n        }\r\n\r\n        function showSeedPopup() {\r\n            var url = Umbraco.Sys.ServerVariables.uSyncPublisher.seedUrl;\r\n            uSyncPublishService.getServerByUrl(url)\r\n                .then(function (result) {\r\n                    showDialog(result.data);\r\n                });\r\n        }\r\n\r\n        function showDialog(server) {\r\n\r\n            var overlay = {\r\n                title: 'Seed from server',\r\n                subtitle: 'Get setting and content from another server',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'overlay/overlayDialog.html',\r\n                isModal: true,\r\n                mode: 'Seed',\r\n                options: {\r\n                    items: [{\r\n                        entityType: 'IContent'\r\n                    }],\r\n                    serverAlias: server.alias,\r\n                    treeItem: null\r\n                },\r\n\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                skipFormValidation: true,\r\n                disableSubmitButton: true,\r\n                submitButtonLabel: 'Continue',\r\n                closeButtonLabel: 'Close',\r\n                submit: function () {\r\n                    if (this.isComplete != null && this.isComplete()) {\r\n                        $scope.$broadcast('usync-publish-close');\r\n                        overlayService.close();\r\n                    }\r\n                    else {\r\n                        if (this.moveToNext != null) {\r\n                            this.moveToNext();\r\n                        }\r\n                    }\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n\r\n        }\r\n\r\n        init();\r\n\r\n        ///////////\r\n        function init() {\r\n\r\n            vm.setup = false;\r\n            vm.servers = [];\r\n            vm.emptySite = true;\r\n\r\n\r\n            uSyncPublishService.hasContentOrMedia(false)\r\n                .then(function (result) {\r\n                    vm.emptySite = !result.data;\r\n                });\r\n\r\n            vm.picked = false;\r\n            vm.syncSettings = true;\r\n            vm.syncContent = true;\r\n            vm.syncMedia = true;\r\n\r\n            vm.items = [];\r\n            vm.options = {};\r\n            vm.headings = {};\r\n\r\n            vm.stepArgs = {};\r\n            vm.state = {\r\n                complete: false,\r\n                loading: true,\r\n                hideClose: true,\r\n                complete: false,\r\n                valid: false,\r\n                working: false\r\n            };\r\n\r\n            vm.actionButton = { state: 'init', name: 'Send' };\r\n\r\n            uSyncPublishService.getServers('pull')\r\n                .then(function (result) {\r\n                    vm.servers = result.data;\r\n                    checkServers(vm.servers);\r\n                });\r\n        }\r\n\r\n        function checkServers(servers) {\r\n            servers.forEach(function (server) {\r\n                uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        vm.state.loading = false;\r\n                        server.status = result.data;\r\n                    });\r\n            });\r\n        }\r\n\r\n        function onSelected(server) {\r\n            vm.server = server;\r\n            vm.picked = true;\r\n        }\r\n\r\n        function performAction() {\r\n            $scope.$broadcast('usync-publish-performAction')\r\n        }\r\n\r\n        function reset() {\r\n            init();\r\n        }\r\n\r\n\r\n        function doSync() {\r\n            vm.options = {\r\n                serverAlias: vm.server.alias,\r\n                contentType: 'settings',\r\n                simple: true, // simple view.\r\n            };\r\n\r\n            vm.items = [];\r\n\r\n            if (vm.syncSettings) {\r\n                vm.items.push(makeRootItem('ContentTypes', 'document-type'));\r\n                vm.items.push(makeRootItem('DocTypes', 'data-type'));\r\n                vm.items.push(makeRootItem('MediaTypes', 'media-type'));\r\n                vm.items.push(makeRootItem('Domains', 'domain'));\r\n                vm.items.push(makeRootItem('MemberTypes', 'member-type'));\r\n                vm.items.push(makeRootItem('DictionaryItems', 'dictionary-item'));\r\n                vm.items.push(makeRootItem('Macros', 'macro'));\r\n                vm.items.push(makeRootItem('Templates', 'template'));\r\n                vm.items.push(makeRootItem('Languages', 'language', ''));\r\n            }\r\n\r\n            if (vm.syncContent) {\r\n                vm.items.push(makeRootItem('PublicAccess', 'protect'));\r\n                vm.items.push(makeRootItem('Content', 'document'));\r\n            }\r\n\r\n            if (vm.syncMedia) {\r\n                vm.items.push(makeRootItem('Media', 'media'));\r\n            }\r\n\r\n            vm.setup = true;\r\n\r\n        }\r\n\r\n        function makeRootItem(name, typename, empty = emptyGuid) {\r\n            return {\r\n                udi: 'umb://' + typename + '/' + empty,\r\n                name: name,\r\n                variants: [{ name: name }]\r\n            };\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherBlankDashboardController', blankDashboardController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function browserDashboard($scope, appState, uSyncPublishService, uSyncPublishDialogManager) {\r\n\r\n        var vm = this;\r\n\r\n        vm.section = appState.getSectionState('currentSection');\r\n\r\n        vm.servers = [];\r\n        vm.server = {};\r\n        vm.picked = false;\r\n\r\n        vm.openDialog = openDialog;\r\n        vm.getFolders = getFolders;\r\n        vm.clearSelection = clearSelection;\r\n        vm.onSelected = onSelected;\r\n\r\n        vm.selectionLabel = 'Pull selection';\r\n\r\n        vm.selectLocal = selectLocal;\r\n        vm.local = false;\r\n\r\n        vm.rootKey = '00000000-0000-0000-0000-000000000000';\r\n\r\n        vm.isBlank = false;\r\n        vm.mode = 'pull';\r\n\r\n        vm.items = {\r\n            folders: [],\r\n            nodes: []\r\n        };\r\n\r\n        uSyncPublishService.getServers(vm.mode)\r\n            .then(function (result) {\r\n                vm.servers = result.data;\r\n                checkServers(vm.servers);\r\n            });\r\n\r\n        uSyncPublishService.hasContentOrMedia(false)\r\n            .then(function (result) {\r\n                vm.isBlank = !result.data;\r\n            });\r\n\r\n\r\n        vm.layouts = [\r\n            {\r\n                name: 'Grid',\r\n                icon: 'icon-thumbnails-small',\r\n                path: 'gridpath',\r\n                selected: true,\r\n                active: true\r\n            },\r\n            {\r\n                name: 'List',\r\n                icon: 'icon-list',\r\n                path: 'listpath',\r\n                selected: true\r\n            }\r\n        ];\r\n\r\n        if (vm.section === 'content') {\r\n            vm.activeLayout = vm.layouts[1];\r\n            vm.layouts[0].active = false;\r\n            vm.layouts[1].active = true;\r\n        }\r\n        else {\r\n            vm.activeLayout = vm.layouts[0];\r\n        }\r\n\r\n        ///////////\r\n\r\n        vm.pageNum = 1;\r\n        vm.onNextPage = onNextPage;\r\n        vm.onPrevPage = onPrevPage;\r\n        vm.onChangePage = onChangePage;\r\n        vm.onGotoPage = onGotoPage;\r\n\r\n\r\n        function onNextPage(pageNumber) {\r\n            loadPage(pageNumber);\r\n        }\r\n\r\n        function onPrevPage(pageNumber) {\r\n            loadPage(pageNumber);\r\n        }\r\n\r\n        function onChangePage(pageNumber) {\r\n            loadPage(pageNumber);\r\n        }\r\n\r\n        function onGotoPage(pageNumber) {\r\n            loadPage(pageNumber);\r\n        }\r\n\r\n        function loadPage(pageNumber) {\r\n            vm.pageNum = pageNumber;\r\n            if (vm.currentKey != null) {\r\n                getFolders(vm.currentKey, vm.pageNum, false);\r\n            }\r\n            else {\r\n                onSelected(vm.server, vm.pageNum);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        ///////////\r\n\r\n\r\n        function checkServers(servers) {\r\n            servers.forEach(function (server) {\r\n                uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n                    });\r\n            });\r\n        }\r\n      \r\n        //////////////\r\n        function openDialog() {\r\n\r\n            if (vm.section === 'content') {\r\n                if (vm.local) {\r\n                    uSyncPublishDialogManager.openPublisherPushContent({\r\n                        items: vm.selected\r\n                    }, function (result) {\r\n                        if (result) {\r\n                            refresh();\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    uSyncPublishDialogManager.openPublisherPullContent({\r\n                        serverAlias: vm.server.alias,\r\n                        items: vm.selected\r\n                    }, function (result) {\r\n                        if (result) {\r\n                            refresh();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (vm.local) {\r\n                    uSyncPublishDialogManager.openPublisherPushMedia({\r\n                        items: vm.selected\r\n                    }, function (result) {\r\n                        if (result) {\r\n                            refresh();\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    uSyncPublishDialogManager.openPublisherPullMedia({\r\n                        serverAlias: vm.server.alias,\r\n                        items: vm.selected\r\n                    }, function (result) {\r\n                        if (result) {\r\n                            refresh();\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function selectLocal() {\r\n            vm.local = true;\r\n            vm.selectionLabel = 'Push selection';\r\n            vm.picked = false;\r\n            vm.server = { name: 'local' };\r\n            vm.servers.forEach(function (server) {\r\n                server.selected = false;\r\n            });\r\n            vm.items = {};\r\n            clearSelection();\r\n            vm.pageNum = 1;\r\n            getFolders(vm.rootKey, vm.pageNum);\r\n        }\r\n\r\n\r\n        //////////////\r\n\r\n        function onSelected(server) {\r\n            vm.picked = true;\r\n            vm.local = false;\r\n            vm.selectionLabel = 'Pull selection';\r\n            vm.server = server;\r\n            vm.loading = true;\r\n            vm.pageNum = 1;\r\n            getFolders(vm.rootKey, vm.pageNum);\r\n        }\r\n\r\n        function getFolders(key, page, clear = true) {\r\n            vm.loading = true;\r\n            vm.currentKey = key;\r\n\r\n            if (clear) {\r\n                clearSelection();\r\n            }\r\n\r\n            if (vm.local) {\r\n                if (vm.section === 'content') {\r\n                    uSyncPublishService.getLocalContentFolders(key, page)\r\n                        .then(function (result) {\r\n                            vm.items = result.data;\r\n                            vm.loading = false;\r\n                            checkContentItems(vm.local);\r\n                            updateSelection();\r\n                        });\r\n                }\r\n                else {\r\n                    uSyncPublishService.getLocalMediaFolders(key, page)\r\n                        .then(function (result) {\r\n                            vm.items = result.data;\r\n                            vm.loading = false;\r\n                            checkMediaItems(vm.local);\r\n                            updateSelection();\r\n                        });\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (vm.section === 'content') {\r\n                    uSyncPublishService.getContentFolders(key, vm.server.alias, page)\r\n                        .then(function (result) {\r\n                            vm.items = result.data;\r\n                            vm.loading = false;\r\n                            checkContentItems(vm.local);\r\n                            updateSelection();\r\n                        });\r\n                }\r\n                else {\r\n                    uSyncPublishService.getMediaFolders(key, vm.server.alias, page)\r\n                        .then(function (result) {\r\n                            vm.items = result.data;\r\n                            vm.loading = false;\r\n                            checkMediaItems(vm.local);\r\n                            updateSelection();\r\n                        });\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateSelection() {\r\n\r\n            _.forEach(vm.items.nodes, function (node) {\r\n\r\n                var selected = _.any(vm.selected, function (s) {\r\n                    return s.udi == node.udi\r\n                });\r\n\r\n                node.selected = selected;\r\n            });\r\n        }\r\n\r\n\r\n        function checkContentItems(local) {\r\n\r\n            if (local && vm.items != null) {\r\n                setLocal(vm.items.folders);\r\n                setLocal(vm.items.nodes);\r\n            }\r\n            else {\r\n\r\n                var udis =\r\n                    _.union(\r\n                        _.pluck(vm.items.folders, 'udi'),\r\n                        _.pluck(vm.items.nodes, 'udi'));\r\n\r\n                uSyncPublishService.getContentChanges(udis, vm.server.alias)\r\n                    .then(function (results) {\r\n                        updateChanges(vm.items.folders, results.data);\r\n                        updateChanges(vm.items.nodes, results.data);\r\n                    });\r\n            }\r\n        }\r\n\r\n        function setLocal(items) {\r\n            if (items !== null && items !== undefined) {\r\n                items.forEach(function (item) {\r\n                    item.local = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        function checkMediaItems(local) {\r\n            if (local && vm.items != null) {\r\n                setLocal(vm.items.folders);\r\n                setLocal(vm.items.nodes);\r\n            }\r\n            else {\r\n                var udis =\r\n                    _.union(\r\n                        _.pluck(vm.items.folders, 'udi'),\r\n                        _.pluck(vm.items.nodes, 'udi'));\r\n\r\n                uSyncPublishService.getMediaChanges(udis, vm.server.alias)\r\n                    .then(function (results) {\r\n                        updateChanges(vm.items.folders, results.data);\r\n                        updateChanges(vm.items.nodes, results.data);\r\n                    });\r\n            }\r\n\r\n        }\r\n\r\n        function updateChanges(items, changes) {\r\n\r\n            if (items !== null && items !== undefined) {\r\n                items.forEach(function (item) {\r\n\r\n                    var index = _.findIndex(changes, { udi: item.udi });\r\n\r\n                    if (index != -1) {\r\n\r\n                        item.syncChecked = true;\r\n                        item.syncAction = changes[index].action;\r\n                        item.syncChange = changes[index].action.change != 'NoChange';\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        function refresh() {\r\n            clearSelection();\r\n            vm.pageNum = 1;\r\n\r\n            if (vm.currentKey != null) {\r\n                getFolders(vm.currentKey, vm.pageNum);\r\n            }\r\n            else {\r\n                onSelected(vm.server, vm.pageNum);\r\n            }\r\n        }\r\n\r\n        function clearSelection() {\r\n            vm.selected = [];\r\n\r\n            clearsSelectedItems(vm.items.folders);\r\n            clearsSelectedItems(vm.items.nodes);\r\n        }\r\n\r\n        function clearsSelectedItems(items) {\r\n            if (items !== undefined && items !== null) {\r\n                for (let i = 0; i < items.length; i++) {\r\n                    items[i].selected = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.selected = [];\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherBrowserDashboardController', browserDashboard);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function cacheController(\r\n        overlayService, notificationsService,\r\n        uSyncCacheService, uSyncSettingManager) {\r\n\r\n        var vm = this;\r\n\r\n        vm.set = 'publisher';\r\n\r\n        vm.enabled = false;\r\n        vm.showSettings = showSettings;\r\n        vm.cacheButtonState = 'init';\r\n\r\n        vm.rebuild = rebuild;\r\n\r\n        getStatus(vm.set);\r\n\r\n        /////////////\r\n\r\n        function getStatus(set) {\r\n            uSyncCacheService.getStatus(set).\r\n                then(function (result) {\r\n                    vm.status = result.data;\r\n                    vm.enabled = checkEnabled(vm.status);\r\n                });\r\n        }\r\n\r\n        function checkEnabled(status) {\r\n            return status.enabled;\r\n        }\r\n\r\n\r\n        function showSettings(enabled) {\r\n\r\n            var settings = {\r\n                uSync: {\r\n                    Complete: {\r\n                        Caching: {\r\n                            Enabled: enabled\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            uSyncSettingManager\r\n                .showAppSettings('usyncpublish_cacheSettings',\r\n                    'usyncpublish_cacheSettingIntro',\r\n                    JSON.stringify(settings, null, 2));\r\n        }\r\n\r\n\r\n        function confirmDisable() {\r\n            var overlay = {\r\n                \"view\": \"default\",\r\n                \"title\": \"Disable cache\",\r\n                \"content\": \"Disabling the cache will remove all cached content, if you re-enable the cache you will have to rebuild it.\",\r\n                \"disableBackdropClick\": true,\r\n                \"disableEscKey\": true,\r\n                \"submitButtonLabel\": \"Keep cache enabled\",\r\n                \"closeButtonLabel\": \"Disable cache\",\r\n                submit: function () {\r\n                    overlayService.close();\r\n                },\r\n                close: function (model) {\r\n\r\n                    model.submitButtonState = \"busy\";\r\n\r\n                    uSyncCacheService.toggleCaches(false, vm.set)\r\n                        .then(function (result) {\r\n\r\n                            vm.status = result.data;\r\n                            vm.enabled = checkEnabled(vm.status);\r\n\r\n                            notificationsService.success('Removed', 'Cache disabled');\r\n                        });\r\n\r\n                    overlayService.close();\r\n\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n        }\r\n\r\n        function confirmRebuild(message) {\r\n            var overlay = {\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'overlay/cacheOverlay.html',\r\n                title: \"Rebuild uSync caches\",\r\n                subtitle: \"Refresh the uSync publisher caches for greater syncing speed\",\r\n                content: message,\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                submitButtonLabel: \"Rebuild\",\r\n                closeButtonLabel: \"Close\",\r\n                submit: function (model) {\r\n\r\n                    if (model.isRebuilt) {\r\n                        overlayService.close();\r\n                        getStatus(vm.set);\r\n                    }\r\n                    else {\r\n\r\n                        if (model.rebuild != null) {\r\n                            model.rebuild();\r\n                        }\r\n\r\n                    }\r\n\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                    getStatus(vm.set);\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n\r\n        }\r\n\r\n\r\n        function rebuild() {\r\n            confirmRebuild('');\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncCacheController', cacheController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function defaultController($rootScope, $q, $timeout,\r\n        notificationsService, uSyncPublishService, uSyncPublishDialogManager) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        vm.settings = {};\r\n        vm.version = '';\r\n\r\n        vm.addNew = addNew;\r\n        vm.deploy = deploy;\r\n        vm.gotoSettings = gotoSettings;\r\n\r\n        vm.toggleValue = toggleValue;\r\n        vm.copyText = copyText;\r\n\r\n        vm.addSelf = addSelf;\r\n\r\n        vm.showHelp = showHelp;\r\n\r\n        init();\r\n\r\n        var e = [];\r\n\r\n        e.push($rootScope.$on('usync-publish-server-delete', function () {\r\n            init();\r\n        }));\r\n\r\n        e.push($rootScope.$on('usync-publish-server-sort', function () {\r\n            init();\r\n        }));\r\n\r\n        /////\r\n        function addNew() {\r\n            uSyncPublishDialogManager.openNewServerDialog(null,\r\n                function (saved) {\r\n                    init();\r\n                });\r\n        }\r\n\r\n        function addSelf() {\r\n            uSyncPublishDialogManager.openNewServerDialog(null, function (saved) {\r\n                init()\r\n            }, vm.settings.serverUrl);\r\n        }\r\n\r\n        function gotoSettings(server) {\r\n            uSyncPublishDialogManager.openServerDialog(server.alias,\r\n                function (saved) {\r\n                    init();\r\n                });\r\n        }\r\n\r\n        function complete() {\r\n            // callback for sync dialog.\r\n        }\r\n\r\n        /////\r\n        function init() {\r\n            vm.loading = true;\r\n            var promises = [];\r\n\r\n            promises.push(uSyncPublishService.getAllServers()\r\n                .then(function (result) {\r\n                    vm.servers = result.data;\r\n                    checkServers(vm.servers);\r\n                }));\r\n\r\n\r\n            promises.push(uSyncPublishService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                }));\r\n\r\n\r\n            $q.all(promises).then(function () {\r\n                vm.loading = false;\r\n            });\r\n\r\n            uSyncPublishService.getVersion()\r\n                .then(function (result) {\r\n                    vm.version = result.data;\r\n                });\r\n        }\r\n\r\n        function checkServers(servers) {\r\n\r\n            servers.forEach(function (server) {\r\n\r\n                server._buttons = {\r\n                    defaultButton: {\r\n                        labelKey: 'usyncpublish_settings',\r\n                        handler: function () { vm.gotoSettings(server); },\r\n                    },\r\n                    subButtons: []\r\n                };\r\n\r\n                uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n\r\n                        if (server.status.enabled) {\r\n                            server._buttons.subButtons = [\r\n                                {\r\n                                    labelKey: 'usyncpublish_deploy',\r\n                                    handler: function () { deploy(server); }\r\n                                },\r\n                                {\r\n                                    labelKey: 'usyncpublish_pullDeploy',\r\n                                    handler: function () { pullDeploy(server); }\r\n                                }];\r\n                        }\r\n                    });\r\n            });\r\n        }\r\n\r\n        function deploy(server) {\r\n            uSyncPublishDialogManager.openConfigDialog(\"Push\", server.alias, function () { });\r\n        }\r\n\r\n        function pullDeploy(server) {\r\n            uSyncPublishDialogManager.openConfigDialog(\"Pull\", server.alias, function () { });\r\n        }\r\n\r\n\r\n\r\n        function toggleValue(value) {\r\n            vm.settings[value] = !vm.settings[value];\r\n\r\n            if (vm.time !== undefined && vm.time != null) {\r\n                $timeout.cancel(vm.time);\r\n            }\r\n\r\n            // toggle but wait one second before saving (so you can toggle multiple things.)\r\n            vm.time = $timeout(saveSettings, 1000);\r\n        }\r\n\r\n        function saveSettings() {\r\n            uSyncPublishService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    notificationsService.success('Save', 'uSync publisher settings saved');\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n\r\n        function copyText() {\r\n            var range = document.createRange();\r\n            range.selectNode(document.getElementById(\"serverUrl\"));\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand(\"copy\");\r\n            window.getSelection().removeAllRanges();\r\n            notificationsService.success('Copied', 'Server url copied to clipboard');\r\n        }\r\n\r\n        function showHelp(title, view) {\r\n            vm.help = {\r\n                title: title,\r\n                subtitle: 'uSync publisher help',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + '/help/' + view + \".html\",\r\n                show: true,\r\n                hideSubmitButton: true,\r\n                submit: function (model) {\r\n                    vm.help = {};\r\n                },\r\n                close: function (model) {\r\n                    vm.help = {};\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherSettingsDefaultController', defaultController);\r\n})();","(function () {\r\n    'use static';\r\n\r\n    function dashboardSettingsController($scope,\r\n        notificationsService, uSyncPublishService,\r\n        uSyncPublishServerManager, uSyncSettingManager) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n\r\n        vm.server = {};\r\n        vm.settings = {};\r\n\r\n        vm.saveState = 'init';\r\n\r\n        vm.showAdvanced = true;\r\n        vm.save = save;\r\n        vm.reloadSettings = reloadSettings;\r\n        vm.createKeys = createKeys;\r\n\r\n        vm.copyText = copyText;\r\n\r\n        vm.groups = [];\r\n\r\n        vm.userGroupPicker = {};\r\n\r\n        getSettings();\r\n\r\n        /////////////////\r\n        function save() {\r\n            saveSettings();\r\n        }\r\n\r\n        var unsubscribe = [];\r\n\r\n        unsubscribe.push($scope.$on('usync-publisher-settings-save', function () {\r\n            saveSettings();\r\n        }));\r\n\r\n        unsubscribe.push($scope.$on('usync-publisher-settings-reload', function () {\r\n            reloadSettings(true);\r\n        }));\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in unsubscribe) {\r\n                unsubscribe[u]();\r\n            }\r\n        });\r\n\r\n\r\n        /////////////////\r\n        function getSettings() {\r\n\r\n            uSyncPublishService.getSettings()\r\n                .then(function (result) {\r\n                    vm.loading = false;\r\n                    vm.settings = result.data;\r\n                    vm.server = vm.settings.server;\r\n\r\n                    initPicker();\r\n\r\n                    if (!vm.settings.hasAppId) {\r\n                        uSyncPublishServerManager.createLocalApiKeys();\r\n                    }\r\n                });\r\n\r\n\r\n            // load all the publishers.\r\n            uSyncPublishService.getPublishers()\r\n                .then(function (result) {\r\n                    vm.publishers = result.data;\r\n                });\r\n\r\n        }\r\n\r\n        function reloadSettings(quite) {\r\n            vm.loading = true;\r\n            vm.saveState = 'busy';\r\n            uSyncPublishService.reloadSettings()\r\n                .then(function (result) {\r\n                    vm.saveState = 'success';\r\n                    vm.loading = false;\r\n                    vm.settings = result.data;\r\n\r\n                    initPicker();\r\n\r\n                    if (!quite) {\r\n                        notificationsService.add({\r\n                            type: 'info',\r\n                            headline: 'Reload',\r\n                            message: 'Settings reloaded from disk'\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        function saveSettings() {\r\n\r\n            vm.saveState = 'busy';\r\n\r\n            // put server settings back in\r\n            vm.settings.server = vm.server;\r\n\r\n            uSyncPublishService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.saveState = 'success';\r\n                    notificationsService.success('Save', 'uSync publisher settings saved');\r\n                }, function (error) {\r\n                    vm.saveState = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function copyText() {\r\n            var copyItem = document.getElementById(\"serverUrl\");\r\n            copyItem.select();\r\n            copyItem.setSelectionRange(0, 99999); /*For mobile devices*/\r\n            document.execCommand(\"copy\");\r\n            notificationsService.success('Copied', 'Server url copied to clipboard');\r\n        }\r\n\r\n        function initPicker() {\r\n            vm.userGroupPicker = {\r\n                value: vm.server.sendSettings,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'pickers/userGroupPicker.html',\r\n                validation: {\r\n                    mandatory: false\r\n                },\r\n                config: {}\r\n            };\r\n\r\n            if (vm.server.allowedServers === undefined || vm.server.allowedServers === null) {\r\n                vm.settings.allowedServers = [];\r\n            }\r\n\r\n            vm.allowedPicker = {\r\n                value: vm.server.allowedServers,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'serverPicker/picker.html',\r\n                validation: {\r\n                    mandatory: true\r\n                },\r\n                config: {\r\n                    multiPicker: false\r\n                }\r\n            }\r\n        }\r\n\r\n        function createKeys() {\r\n            uSyncPublishService.createKeys()\r\n                .then(function (result) {\r\n                    vm.saveState = 'success';\r\n                    uSyncSettingManager\r\n                        .showAppSettings('usyncpublish_securityKey',\r\n                            'usyncpublish_createKeyIntro',\r\n                            result.data.json);\r\n                });\r\n        }\r\n\r\n        var unsubscribe = [];\r\n\r\n        unsubscribe.push($scope.$watch('vm.publisher', function (newValue) {\r\n            if (newValue !== undefined) {\r\n\r\n                var pub = _.find(vm.publishers, function (pub) { return pub.alias === newValue; });\r\n                if (pub != null) {\r\n                    vm.publisherDescription = pub.description;\r\n                }\r\n            }\r\n        }));\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in unsubscribe) {\r\n                unsubscribe[u]();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherSettingsController', dashboardSettingsController);\r\n})();","(function () {\r\n    'use static';\r\n\r\n    function syncController($scope,\r\n        $location, $routeParams, \r\n        notificationsService,\r\n        uSyncPublishService,\r\n        uSyncPublishDialogManager) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n\r\n        vm.servers = [];\r\n\r\n      \r\n        vm.checkSettings = checkSettings;\r\n\r\n        /// init \r\n        getServers();\r\n\r\n        //////////\r\n\r\n        function checkSettings(server) {\r\n\r\n            var items = [\r\n                {\r\n                    id: '-1', uid: '', name: 'ContentType'\r\n                },\r\n                {\r\n                    id: '-1', udi: '', name: 'DataType'\r\n                },\r\n                {\r\n                    id: '-1', udi: '', name: 'MediaType'\r\n                }];\r\n\r\n            var options = {\r\n                entity: {\r\n                    id: '-1',\r\n                    items: items,\r\n                    server: server,\r\n                    contentType: 'settings'\r\n                }\r\n            };\r\n\r\n            uSyncPublishDialogManager.openSyncDialog('Deploy Settings', 'publisher', options, complete, 'SettingsPush', '');\r\n        }\r\n\r\n        function complete() {\r\n            // console.log('done');\r\n        }\r\n\r\n\r\n        //////////\r\n        function getServers() {\r\n            uSyncPublishService.getAllServers()\r\n                .then(function (result) {\r\n                    vm.servers = result.data;\r\n                    checkServers(vm.servers);\r\n                });\r\n        }\r\n\r\n        function checkServers(servers) {\r\n            servers.forEach(function (server) {\r\n                uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n                    });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherSyncController', syncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function addServerController($rootScope, $scope, notificationsService,\r\n        uSyncPublishService, uSyncPublishServerManager) {\r\n\r\n        var vm = this;\r\n        vm.loading = false;\r\n        vm.selected = false;\r\n        vm.checked = false;\r\n        vm.showCheck = false;\r\n\r\n        vm.dialog = {\r\n            title: 'Add Server',\r\n            description: 'Connect to a new server'\r\n        };\r\n\r\n        vm.server = {\r\n            name: '',\r\n            placeholder: $scope.model.placeholder,\r\n            url: $scope.model.url\r\n        };\r\n\r\n        if ($scope.model.url !== undefined) {\r\n            vm.server.url = $scope.model.url;\r\n        }\r\n\r\n        vm.checkState = 'init';\r\n\r\n        vm.close = close;\r\n        vm.save = save;\r\n        vm.select = select;\r\n\r\n        vm.nameChange = nameChange;\r\n        vm.urlChange = urlChange;\r\n\r\n        vm.setupServer = setupServer;\r\n        vm.checkServer = checkServer;\r\n\r\n        init();\r\n\r\n        function init() {\r\n            getSettings();\r\n            loadTemplates();\r\n        }\r\n\r\n        function getSettings() {\r\n            uSyncPublishService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n\r\n                    if (!vm.settings.hasAppId) {\r\n                        uSyncPublishServerManager.createLocalApiKeys();\r\n                    }\r\n                });\r\n        }\r\n\r\n        // template stuff \r\n        function loadTemplates() {\r\n            uSyncPublishService.getTemplates()\r\n                .then(function (result) {\r\n                    vm.templates = result.data;\r\n                }, function (error) {\r\n\r\n                });\r\n        }\r\n\r\n        function select(template) {\r\n            vm.templates.forEach(function (t) {\r\n                t.selected = false;\r\n            });\r\n\r\n            template.selected = true;\r\n            vm.selected = true;\r\n\r\n            vm.server.icon = template.icon;\r\n            vm.server.enabled = true;\r\n            vm.server.pullEnabled = true;\r\n            vm.server.sendSettings = template.flags;\r\n            vm.server.publisher = template.publisher;\r\n            vm.server.publisherConfig = template.publisherConfig\r\n        }\r\n\r\n        function urlChange() {\r\n            vm.showCheck = false;\r\n        }\r\n\r\n        function nameChange() {\r\n            if (vm.server.name != null) {\r\n                vm.server.alias = vm.server.name.toUmbracoAlias();\r\n            }\r\n        }\r\n\r\n        function checkServer() {\r\n            if (vm.server.url == undefined) { return; }\r\n            vm.checkState = 'busy';\r\n            vm.server.url = vm.server.url.trimEnd('/');\r\n            uSyncPublishServerManager.checkServerByUrl(vm.server.url,\r\n                function (status) {\r\n                    vm.status = status;\r\n                    if (status.Status === 'Success') {\r\n                        vm.checkState = 'success';\r\n                    }\r\n                    else {\r\n                        vm.checkState = 'error';\r\n                    }\r\n                    vm.checked = true;\r\n                    vm.showCheck = true;\r\n                });\r\n        }\r\n\r\n        function setupServer() {\r\n            uSyncPublishServerManager.remoteSetup(vm.server,\r\n                function (success) {\r\n                    if (success) {\r\n                        checkServer();\r\n                    }\r\n                });\r\n        }\r\n\r\n        // dialog controls\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function save() {\r\n            uSyncPublishService.saveServer(vm.server)\r\n                .then(function (result) {\r\n                    vm.buttonState = 'success';\r\n                    notificationsService.success('Saved', vm.server.alias + ' server settings have been updated');\r\n                    $rootScope.$broadcast('usync-publish-serverSave');\r\n                }, function (error) {\r\n                    vm.buttonState = 'error';\r\n                    notificationsService.error('error', error.data.exceptionMessage);\r\n                });\r\n\r\n            if ($scope.model.submit) {\r\n                $scope.model.submit(vm.server);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncAddServerController', addServerController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function changesController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.min.js';\r\n\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            if (vm.item.details != null) {\r\n\r\n                vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                    let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                    let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                    if (detail.oldValueJson instanceof Object) {\r\n                        oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                    }\r\n\r\n                    if (detail.newValueJson instanceof Object) {\r\n                        newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                    }\r\n\r\n                    detail.diff = JsDiff.diffWords(oldValueDiff, newValueDiff);\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherDetailChangesController', changesController);\r\n        \r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function detailController($scope, $q, eventsService, uSyncPublishService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n        vm.server = $scope.model.server;\r\n        vm.viewFirst = $scope.model.viewFirst;\r\n\r\n        vm.showServers = $scope.model.showServers ?? false;\r\n\r\n        vm.hideServerBox = false;\r\n\r\n        vm.entity = $scope.model.entity;\r\n        vm.loaded = !vm.showServers;\r\n        vm.missing = false;\r\n        vm.servers = [];\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-publisher-detail.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            navigation: [\r\n                {\r\n                    'name': 'Detail',\r\n                    'alias': 'changes',\r\n                    'icon': 'icon-bulleted-list',\r\n                    'view': Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSyncPublisher/dialogs/detail.changes.html\",\r\n                    'active': true\r\n                }\r\n            ]\r\n        }\r\n\r\n        if (vm.item.itemType == 'IContent' || vm.item.itemType == 'IMedia') {\r\n            vm.page.navigation.push({\r\n                'name': 'View',\r\n                'alias': 'view',\r\n                'icon': 'icon-display',\r\n                'view': Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSyncPublisher/dialogs/detail.view.html\",\r\n            });\r\n\r\n            if (vm.viewFirst)\r\n            {\r\n                vm.page.navigation[0].active = false;\r\n                vm.page.navigation[1].active = true;\r\n                eventsService.emit('usync-publisher-detail.tab.change', vm.page.navigation[1]);\r\n            }\r\n\r\n        }\r\n\r\n        // methods\r\n        vm.close = close;\r\n\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        // server picker \r\n\r\n        vm.onSelected = onServerSelected;\r\n\r\n        vm.$onInit = function () {\r\n\r\n            if (vm.showServers) {\r\n\r\n                uSyncPublishService.getServers(vm.mode)\r\n                    .then(function (result) {\r\n                        vm.servers = result.data;\r\n                        checkServers(vm.servers);\r\n                    });\r\n            }\r\n        }\r\n\r\n        //// utils.\r\n        function checkServers(servers) {\r\n            var checks = [];\r\n\r\n            servers.forEach(function (server) {\r\n                checks.push(uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n                    }));\r\n            });\r\n\r\n            $q.all(checks).then(function () {\r\n                //if (vm.servers.length === 1) {\r\n                //    onServerSelected(vm.servers[0]);\r\n                //}\r\n                $scope.$broadcast('usync-servers-checked', servers);\r\n\r\n                if (vm.servers.length === 1) {\r\n                    vm.hideServerBox = true;\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n        function onServerSelected(server) {\r\n            vm.loaded = false;\r\n            // here we need to go get the page diffrences (via the remote api?)\r\n            // and load them into the page. \r\n\r\n            $scope.model.server = server;\r\n            vm.server = server;\r\n\r\n            if (vm.item.itemType === 'IContent') {\r\n                uSyncPublishService.getContentChanges([vm.entity.udi], server.alias)\r\n                    .then(function (result) {\r\n\r\n                        if (result.data.length > 0) {\r\n                            vm.item = result.data[0].action;\r\n                            $scope.model.item = vm.item;\r\n                            vm.loaded = true;\r\n                        }\r\n                        else {\r\n                            vm.missing = true;\r\n                        }\r\n\r\n                    });\r\n            }\r\n            else if (vm.item.itemType === 'IMedia') {\r\n                uSyncPublishService.getMediaChanges([vm.entity.udi], server.alias)\r\n                    .then(function (result) {\r\n\r\n                        if (result.data.length > 0) {\r\n                            vm.item = result.data[0].action;\r\n                            $scope.model.item = vm.item;\r\n                            vm.loaded = true;\r\n                        }\r\n                        else {\r\n                            vm.missing = true;\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherDetailController', detailController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function detailViewController($scope, $sce, eventsService, uSyncPublishService) {\r\n\r\n        var vm = this;\r\n        vm.loaded = false;\r\n        vm.loading = true;\r\n        vm.item = $scope.model.item;\r\n        vm.server = $scope.model.server;\r\n        vm.viewFirst = $scope.model.viewFirst;\r\n        vm.entity = {};\r\n\r\n        vm.isContent = vm.item.itemType != 'IMedia';\r\n\r\n        var evts = [];\r\n\r\n        if (!vm.loaded && vm.viewFirst) {\r\n            loadView();\r\n        }\r\n\r\n        evts.push(eventsService.on(\"usync-publisher-detail.tab.change\", function () {\r\n            if (!vm.loaded) {\r\n                loadView();\r\n            }\r\n        }));\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var e in evts) {\r\n                eventsService.unsubscribe(evts[e]);\r\n            }\r\n        });\r\n\r\n\r\n        function loadView() {\r\n            vm.loaded = true;\r\n\r\n            if (vm.isContent) {\r\n\r\n                uSyncPublishService.getContentEntity(vm.item.key, vm.server.alias)\r\n                    .then(function (result) {\r\n                        vm.entity = result.data;\r\n\r\n                        vm.localUrl = $sce.trustAsResourceUrl(vm.entity.local.localUrl);\r\n                        vm.remoteUrl = $sce.trustAsResourceUrl(vm.entity.remote.remoteUrl)\r\n                        vm.loading = false;\r\n\r\n                    });\r\n            }\r\n            else {\r\n                uSyncPublishService.getMediaEntity(vm.item.key, vm.server.alias)\r\n                    .then(function (result) {\r\n                        vm.entity = result.data;\r\n\r\n                        vm.localUrl = $sce.trustAsResourceUrl(vm.entity.local.localUrl);\r\n                        vm.localMedia = JSON.parse(vm.entity.local.mediaProperty);\r\n\r\n                        vm.remoteUrl = $sce.trustAsResourceUrl(vm.entity.remote.remoteUrl)\r\n                        vm.remoteMedia = JSON.parse(vm.entity.remote.mediaProperty);\r\n                        vm.loading = false;\r\n\r\n                    });\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherDetailViewController', detailViewController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function publisherDialogController($scope) {\r\n\r\n        var vm = this;\r\n\r\n        // methods\r\n        vm.close = close;\r\n        vm.performAction = performAction;\r\n        vm.showItems = showItems;\r\n\r\n        // init\r\n        vm.mode = $scope.model.mode;\r\n        vm.options = $scope.model.options;\r\n        vm.items = vm.options.items;\r\n        vm.single = $scope.model.single;\r\n        vm.hideItems = vm.options.hideItems ?? false;\r\n\r\n        // state \r\n        vm.state = {\r\n            complete: false,\r\n            loading: true,\r\n            hideClose: false,\r\n            valid: false,\r\n            working: false,\r\n            hasError: false,\r\n            error: ''\r\n        };\r\n\r\n        // ui\r\n        vm.ui = {\r\n            button: {\r\n                state: 'init',\r\n                name: 'Send',\r\n            },\r\n            headings: {\r\n                title: 'uSyncPublisher',\r\n                description: 'push and pull things',\r\n                boxTitle: 'uSyncPublisher_box',\r\n                boxDescription: 'uSyncPublisher_box_desc'\r\n            }\r\n        }\r\n\r\n        // button\r\n        vm.actionButton = {\r\n            state: 'init',\r\n            name: 'Send',\r\n            valid: false\r\n        };\r\n\r\n        function showItems() {\r\n            return !vm.hideItems && vm.items.length > 1;\r\n        }\r\n\r\n\r\n        function performAction() {\r\n            $scope.$broadcast('usync-publish-performAction')\r\n        }\r\n\r\n\r\n        function close() {\r\n            $scope.$broadcast('usync-publish-close');\r\n\r\n            if (vm.state.complete && $scope.model.submit) {\r\n                $scope.model.submit();\r\n            }\r\n            else if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherDialogController', publisherDialogController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function sideBySideController($scope, $sce) {\r\n\r\n        var vm = this;\r\n\r\n        vm.source = $sce.trustAsResourceUrl($scope.model.source);\r\n        vm.target = $sce.trustAsResourceUrl($scope.model.target)\r\n\r\n        vm.close = close;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSideBySideController', sideBySideController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function cacheOverlayController($scope, $q, notificationsService, uSyncDependencyManager, uSyncCacheService) {\r\n\r\n        var vm = this;\r\n        vm.rebuilding = false;\r\n\r\n        $scope.model.rebuilt = false;\r\n        $scope.model.rebuild = rebuildCache\r\n        $scope.model.submitButtonLabel = 'rebuild';\r\n\r\n        vm.status = {\r\n            Title: 'Rebuilding uSync Caches',\r\n            Message: 'Collecting items',\r\n            Progress: 0\r\n        };\r\n\r\n        vm.offset = 230;\r\n        vm.offsetStyle = { transform: 'translateX(' + vm.offset + 'px)' };\r\n\r\n        vm.batchSize = 25;\r\n\r\n        vm.cacheTypes = [\r\n            { name: 'Data types', type: 'data-type', icon: 'icon-autofill', active: true },\r\n            { name: 'Content Types', type: 'document-type', icon: 'icon-item-arrangement' },\r\n            { name: 'Media Types', type: 'media-type', icon: 'icon-thumbnails' },\r\n            { name: 'Content', type: 'document', icon: 'icon-document color-orange' },\r\n            { name: 'Media', type: 'media', icon: 'icon-picture color-green' }\r\n        ];\r\n\r\n        function rebuildCache() {\r\n\r\n            $scope.model.disableSubmitButton = true;\r\n            $scope.model.submitButtonState = 'busy';\r\n            vm.rebuilding = true;\r\n\r\n            vm.error = '';\r\n\r\n            var i = 0;\r\n\r\n            uSyncCacheService.clearCaches('publisher')\r\n                .then(function () {\r\n                    processRebuild(vm.cacheTypes[0]);\r\n                });\r\n\r\n            function processRebuild(itemType) {\r\n\r\n                calcOffset(i);\r\n                vm.cacheTypes[i].active = true;\r\n                i++;\r\n\r\n                rebuildEntityType(itemType)\r\n                    .then(function (result) {\r\n                        if (i < vm.cacheTypes.length) {\r\n                            vm.cacheTypes[i - 1].active = false;\r\n                            processRebuild(vm.cacheTypes[i]);\r\n                        }\r\n                        else {\r\n                            flushCache();\r\n                            $scope.model.closeButtonLabel = 'Done';\r\n                            $scope.model.rebuilt = true;\r\n                            $scope.model.hideSubmitButton = true;\r\n                        }\r\n                    }, function (error) {\r\n                        notificationsService.error('error', 'there where problems rebuilding the cache');\r\n                    });\r\n            }\r\n        }\r\n\r\n        function rebuildEntityType(itemType) {\r\n\r\n            return $q(function (resolve, reject) {\r\n\r\n                vm.status = {\r\n                    Title: 'Rebuilding ' + itemType.name,\r\n                    Icon: itemType.icon,\r\n                    Message: 'Collecting items',\r\n                    Progress: 0\r\n                };\r\n\r\n                uSyncCacheService.getAllUdis(itemType.type)\r\n                    .then(function (result) {\r\n\r\n                        var batches = uSyncDependencyManager.createBatches(result.data, 10);\r\n\r\n                        processItems(itemType.type, batches)\r\n                            .then(function (result) {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        }\r\n\r\n\r\n        function processItems(entityType, batches) {\r\n\r\n            return $q(function (resolve, reject) {\r\n\r\n                var i = 0;\r\n                process(batches[i]);\r\n\r\n                function process(items) {\r\n                    i++;\r\n\r\n                    vm.status.Message = 'Processing batch ' + i + ' of ' + batches.length;\r\n                    vm.status.Progress = (i / batches.length) * 100;\r\n\r\n                    uSyncCacheService.cacheItems(entityType, 'publisher', items)\r\n                        .then(function (result) {\r\n                            if (i < batches.length) {\r\n                                process(batches[i]);\r\n                            }\r\n                            else {\r\n                                vm.status.Message = 'Complete';\r\n                                resolve();\r\n                            }\r\n                        }, function (error) {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        function flushCache() {\r\n            uSyncCacheService.flush('publisher')\r\n                .then(function () {\r\n                    // done\r\n                }, function (error) {\r\n                    notificationsService.error('error', 'unable to save cache to disk, check logs');\r\n                });\r\n\r\n        }\r\n\r\n        function calcOffset(n) {\r\n            var offset = vm.offset - (75 * n);\r\n            vm.offsetStyle = { transform: 'translateX(' + offset + 'px)' };\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncCacheOverlayController', cacheOverlayController);\r\n})();\r\n","(function () {\r\n\r\n    'use strict';\r\n\r\n    function loader(eventsService, uSyncPublishOverlayManager) {\r\n\r\n        eventsService.on('app.tabChange', function (evt, data) {\r\n            update(data.content);\r\n        });\r\n\r\n        eventsService.on('content.loaded', function (evt, data) {\r\n            update(data.content);\r\n        });\r\n\r\n        eventsService.on('content.newReady', function (evt, data) {\r\n            update(data.content);\r\n        });\r\n\r\n        eventsService.on('content.saved', function (evt, data) {\r\n            update(data.content);\r\n        });\r\n\r\n        function update(content) {\r\n            uSyncPublishOverlayManager.insertPublishCmds(content);\r\n        }\r\n     \r\n    }\r\n\r\n    angular.module('umbraco').run(loader);\r\n\r\n})();","\r\n(function () {\r\n    'use strict';\r\n\r\n    function overlayController($scope, uSyncItemManager) {\r\n\r\n        var vm = this;\r\n\r\n        $scope.model.moveToNext = moveToNext;\r\n        $scope.model.isComplete = isComplete;\r\n\r\n        var model = $scope.model;\r\n\r\n        vm.mode = model.mode;\r\n        vm.isSingle = true;\r\n        vm.options = $scope.model.options;\r\n        vm.items = vm.options.items;\r\n        vm.server = model.server;\r\n\r\n        vm.headings = {};\r\n\r\n        vm.stepArgs = {\r\n            stepAlias: '',\r\n            target: '',\r\n            options: '',\r\n            clientId: ''\r\n        };\r\n\r\n        vm.state = {\r\n            complete: false,\r\n            loading: true,\r\n            hideClose: true,\r\n            valid: false,\r\n            working: false,\r\n            hasError: false,\r\n            error: ''\r\n        };\r\n\r\n        vm.actionButton = { state: 'init', name: 'Send' };\r\n\r\n        var evts = [];\r\n\r\n        evts.push($scope.$watch('vm.state', function (state) {\r\n            if (state !== undefined) {\r\n                if (state.complete) {\r\n                    $scope.model.closeButtonLabel = 'Done';\r\n                    $scope.model.hideSubmitButton = true;\r\n                }\r\n                else if (state.working) {\r\n                    $scope.model.hideSubmitButton = true;\r\n                }\r\n                else {\r\n                    $scope.model.hideSubmitButton = false;\r\n                }\r\n\r\n                $scope.model.disableSubmitButton = !state.valid;\r\n            }\r\n        }, true));\r\n\r\n        evts.push($scope.$watch('vm.headings', function (headings) {\r\n            if (headings !== undefined) {\r\n                if (headings.title !== undefined) {\r\n                    $scope.model.title = headings.title;\r\n                }\r\n\r\n                if (headings.description !== undefined) {\r\n                    $scope.model.subtitle = headings.description;\r\n                }\r\n            }\r\n        }, true));\r\n\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var x in evts) {\r\n                evts[x]();\r\n            }\r\n        });\r\n\r\n        function isComplete() {\r\n            return vm.state.isComplete;\r\n        }\r\n     \r\n        function moveToNext() {\r\n            $scope.$broadcast('usync-publish-performAction')\r\n        }\r\n\r\n        function init() {\r\n            $scope.model.disableSubmitButton = true;\r\n        }\r\n\r\n        init();\r\n\r\n    };\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublishOverlayController', overlayController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function overlayManager($rootScope, overlayService, uSyncItemManager) {\r\n\r\n        var mgr = {};\r\n\r\n        return {\r\n            insertPublishCmds: insertPublishCmds\r\n        };\r\n\r\n        /////\r\n        function insertPublishCmds(content) {\r\n\r\n            if (content !== undefined) {\r\n                mgr.content = content;\r\n            }\r\n\r\n            var contentForm = angular.element(document).find('[name=\"contentForm\"]');\r\n            if (contentForm != null) {\r\n                var formScope = findScope($rootScope);\r\n                if (formScope != null) {\r\n                    if (_.contains(formScope.content.allowedActions, '^')) {\r\n\r\n                        if (formScope.subButtons !== null) {\r\n                            if (!_.some(formScope.subButtons, function (b) { return b.letter == 'SYNCPUB'; })) {\r\n                                var button = {\r\n                                    letter: 'SYNCPUB',\r\n                                    labelKey: 'usyncpublish_publishButton',\r\n                                    handler: publishToSite,\r\n                                    alias: 'usyncSitePublish',\r\n                                    addEllipsis: 'true'\r\n                                };\r\n\r\n                                formScope.subButtons.splice(1, 0, button);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function findScope(scope) {\r\n\r\n            if (!scope) return null;\r\n\r\n            var contentScope = null;\r\n            if (scope.subButtons !== undefined && scope.content !== undefined) {\r\n                return scope;\r\n            }\r\n\r\n            if (scope.$$childHead !== null) {\r\n                contentScope = findScope(scope.$$childHead);\r\n            }\r\n\r\n            if (contentScope === null && scope.$$nextSibling !== null) {\r\n                contentScope = findScope(scope.$$nextSibling);\r\n            }\r\n\r\n            return contentScope;\r\n        }\r\n\r\n        function publishToSite() {\r\n\r\n            var treeItem = {\r\n                id: mgr.content.id,\r\n                treeAlias: \"content\",\r\n                sectionAlias: \"content\"\r\n            };\r\n\r\n            uSyncItemManager.getEntity(treeItem)\r\n                .then(function (result) {\r\n\r\n                    var options = {\r\n                        items: [result.data],\r\n                        treeItem: treeItem,\r\n                    };\r\n\r\n                    openPublishDialog(options);\r\n                });\r\n        }\r\n\r\n\r\n        function openPublishDialog(options) {\r\n\r\n            var overlay = {\r\n                title: 'Publish to server...',\r\n                subtitle: 'Select which server you wish to publish the content to',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'overlay/overlayDialog.html',\r\n                isModal: true,\r\n                mode: 'Push',\r\n                server: {},\r\n                options: options,\r\n\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                skipFormValidation: true,\r\n                disableSubmitButton: true,\r\n                submitButtonLabel: 'Continue',\r\n                closeButtonLabel: 'Close',\r\n                submit: function () {\r\n                    if (this.isComplete != null && this.isComplete()) {\r\n                        $scope.$broadcast('usync-publish-close');\r\n                        overlayService.close();\r\n                    }\r\n                    else {\r\n                        if (this.moveToNext != null) {\r\n                            this.moveToNext();\r\n                        }\r\n                    }\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n          \r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncPublishOverlayManager', overlayManager);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function userGroupPickerController($scope, editorService, uSyncPublishService, userService) {\r\n\r\n        var vm = this; \r\n        vm.remove = remove;\r\n        vm.open = open;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n        vm.groups = [];\r\n\r\n        vm.value = $scope.model.value.groups;\r\n\r\n        if (!vm.value) {\r\n            vm.value = [];\r\n        }\r\n\r\n        loadUserGroups();\r\n\r\n\r\n        userService.getCurrentUser().then(function (currentUser) {\r\n            vm.readonly = !currentUser.allowedSections.includes(\"users\");\r\n        });\r\n\r\n        function loadUserGroups() {\r\n            vm.groups = [];\r\n            uSyncPublishService.getUserGroups()\r\n                .then(function (result) {\r\n\r\n                    var userGroups = result.data;\r\n\r\n                    vm.value.forEach(function (alias, index) {\r\n\r\n                        var userGroup = _.where(userGroups, { alias: alias });\r\n\r\n                        if (userGroup !== null && userGroup.length === 1) {\r\n                            vm.groups.push(userGroup[0]);\r\n                        }\r\n\r\n                    });\r\n\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function syncGroupList() {\r\n            var list = [];\r\n\r\n            vm.groups.forEach(function (group, index) {\r\n                list.push(group.alias);\r\n            });\r\n\r\n            vm.value = list;\r\n            $scope.model.value.groups = vm.value;\r\n        }\r\n\r\n\r\n        function remove(group) {\r\n            for (let i = 0; i < vm.groups.length; i++) {\r\n                if (vm.groups[i].alias === group.alias) {\r\n                    vm.groups.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            syncGroupList();\r\n        }\r\n\r\n        function open() {\r\n\r\n            var currentSelection = [];\r\n            angular.copy(vm.groups, currentSelection);\r\n\r\n            var options = {\r\n                selection: currentSelection,\r\n                submit: function (model) {\r\n                    if (model.selection) {\r\n                        vm.groups = model.selection;\r\n                        syncGroupList();\r\n                    }\r\n                    editorService.close();\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n\r\n            editorService.userGroupPicker(options);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('usyncUserGroupPickerController', userGroupPickerController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function remoteOverlayController($scope) {\r\n\r\n        var vm = this;\r\n        vm.server = $scope.model.server;\r\n        vm.togglePassword = togglePassword;\r\n\r\n        $scope.model.disableSubmitButton = false;\r\n\r\n        function togglePassword() {\r\n            var elem = $(\"form[name='usyncremoteserver'] input[name='password']\");\r\n            elem.attr(\"type\", (elem.attr(\"type\") === \"text\" ? \"password\" : \"text\"));\r\n            elem.focus();\r\n            $(\".password-text.show, .password-text.hide\").toggle();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherRemoteOverlayController', remoteOverlayController);\r\n\r\n})();","(function () {\r\n    'use static';\r\n\r\n    function syncSetupController($scope, uSyncPublishService) {\r\n\r\n        var vm = this;\r\n        vm.servers = [];\r\n\r\n        vm.selectServer = selectServer;\r\n\r\n        /// \r\n        uSyncPublishService.getAllServers()\r\n            .then(function (result) {\r\n                vm.servers = result.data;\r\n                checkServers(vm.servers);\r\n            });\r\n\r\n        ///\r\n        function checkServers(servers) {\r\n            servers.forEach(function (server) {\r\n                uSyncPublishService.checkServer(server.alias)\r\n                    .then(function (result) {\r\n                        server.status = result.data;\r\n                        if (server.status.enabled === true) {\r\n                            server.selected = true;\r\n                            checkSelection();\r\n                        }\r\n                    });\r\n            });\r\n        }\r\n\r\n        ///\r\n        function selectServer(server) {\r\n            if ($scope.model.busy) return;\r\n\r\n            if (server.status === undefined || server.status.enabled !== true) {\r\n                return;\r\n            }\r\n\r\n            server.selected = !server.selected;\r\n            checkSelection();\r\n        }\r\n\r\n\r\n        function checkSelection() {\r\n\r\n            $scope.model.servers = [];\r\n            for (let s = 0; s < vm.servers.length; s++) {\r\n                if (vm.servers[s].selected === true) {\r\n                    $scope.model.servers.push(vm.servers[s].alias);\r\n                }\r\n            }\r\n\r\n            if ($scope.model.servers.length > 0) {\r\n                $scope.model.disableSubmitButton = false;\r\n            }\r\n            else {\r\n                $scope.model.disableSubmitButton = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('usyncSyncSetupController', syncSetupController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function publishActionManager($q) {\r\n\r\n        return {\r\n            // flags\r\n            initFlags: initFlags,\r\n            prepToggles: prepToggles,\r\n\r\n            // actions\r\n            hasStepActions: hasStepActions,\r\n\r\n            // ui things. \r\n            getDialogTitle: getDialogTitle,\r\n            getActionMessage: getActionMessage,\r\n            getDescription: getDescription,\r\n\r\n            emptyGuid: '00000000-0000-0000-0000-000000000000',\r\n            mergeResults: mergeResults,\r\n            mergeDependencies: mergeDependencies\r\n        };\r\n\r\n        //////\r\n       \r\n\r\n        function getActionMessage(action) {\r\n            return { title: action.Name, Steps: action.Steps };\r\n        }\r\n\r\n        function getDialogTitle(action) {\r\n            return action.Name;\r\n        }\r\n\r\n        function getDescription(mode, contentType, serverName) {\r\n            var modeName = mode === 'SettingsPush' ? 'Push' : mode;\r\n            var direction = mode === 'pull' ? ' from ' : ' to ';\r\n            return capitalizeFirstLetter(modeName + ' ' + contentType + direction + serverName);\r\n        }\r\n\r\n        function capitalizeFirstLetter(string) {\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        }\r\n\r\n        function hasStepActions(action) {\r\n            for (let n = 0; n < action.Steps.length; n++) {\r\n                if (action.Steps[n].IsAction == true) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        ///// flags\r\n        function initFlags() {\r\n            return {\r\n                includeAncestors: { toggle: false, value: false },\r\n\r\n                includeChildren: { toggle: true, value: true },\r\n                includeDecendants: { toggle: false, value: true },\r\n                deleteMissing: { toggle: true, value: false },\r\n\r\n                includeDependencies: { toggle: false, value: false },\r\n\r\n                includeFiles: { toggle: false, value: false },\r\n                includeMedia: { toggle: true, value: true },\r\n                includeMediaFiles: { toggle: false, value: false },\r\n\r\n                includeLinked: { toggle: true, value: false },\r\n                includeConfig: { toggle: false, value: true }\r\n            };\r\n        }\r\n\r\n        function prepToggles(server, flags, contentType) {\r\n            var op = server.sendSettings;\r\n            if (op !== undefined) {\r\n\r\n                flags.includeAncestors = setToggle(op.includeAncestors);\r\n\r\n                flags.includeChildren = setToggle(op.includeChildren);\r\n                flags.includeDecendants = setToggle(op.includeDecendants);\r\n                flags.deleteMissing = setToggle(op.deleteMissing);\r\n\r\n                flags.includeDependencies = setToggle(op.includeDependencies);\r\n\r\n                flags.includeFiles = setToggle(op.includeFiles);\r\n                flags.includeMedia = setToggle(op.includeMedia);\r\n                flags.includeMediaFiles = setToggle(op.includeMediaFiles);\r\n\r\n                flags.includeLinked = setToggle(op.includeLinked);\r\n                flags.includeConfig = setToggle(op.includeConfig);\r\n\r\n                // override the settings for media \r\n                if (contentType === 'media') {\r\n                    flags.includeMedia = { toggle: false, value: true };\r\n                    flags.includeAncestors = { toggle: false, value: true };\r\n                    flags.includeFiles = { toggle: false, value: false };\r\n                    flags.includeLinked = { toggle: false, value: false };\r\n                }\r\n            }\r\n\r\n            return flags;\r\n        }\r\n\r\n\r\n        function setToggle(value) {\r\n            if (value !== undefined && value.startsWith('user')) {\r\n                return { toggle: true, value: value.endsWith('yes') };\r\n            }\r\n            else {\r\n                return { toggle: false, value: value === 'yes' };\r\n            }\r\n        }\r\n\r\n        function mergeResults(source, target) {\r\n\r\n            if (source === null || source === undefined) {\r\n                return target;\r\n            }\r\n\r\n            if (target === undefined || target === null) {\r\n                target = [];\r\n            }\r\n\r\n\r\n            for (let i = 0; i < source.length; i++) {\r\n\r\n                var targetAction = _.findWhere(target, { key: source[i].key });\r\n                if (targetAction !== undefined) {\r\n                    if (source[i].change !== 'NoChange' && source[i].change !== 'Import') {\r\n                        var indexOfAction = _.indexOf(target, targetAction)\r\n                        target[indexOfAction] = source[i];\r\n                    }\r\n                }\r\n                else {\r\n                    target.push(source[i]);\r\n                }\r\n            }\r\n\r\n            return target;\r\n        }\r\n\r\n        function mergeDependencies(source, target) {\r\n            if (source === null || source === undefined) {\r\n                return target;\r\n            }\r\n\r\n            if (target === undefined || target === null) {\r\n                target = [];\r\n            }\r\n\r\n            for (let i = 0; i < source.length; i++) {\r\n                var targetDependency = _.findWhere(target, { Udi: source[i].Udi });\r\n                if (targetDependency !== undefined) {\r\n                    var index = _.indexOf(target, targetDependency);\r\n                    target[index] = source[i];\r\n                }\r\n                else {\r\n                    target.push(source[i]);\r\n                }\r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncActionManager', publishActionManager);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dialogManager($rootScope, $timeout, entityResource,\r\n        editorService, navigationService, uSyncItemManager) {\r\n\r\n        var emptyGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n        return {\r\n            openPublisherPushContent: openPublisherPushContent,\r\n            openPublisherPullContent: openPublisherPullContent,\r\n\r\n            openPublisherPushMedia: openPublisherPushMedia,\r\n            openPublisherPullMedia: openPublisherPullMedia,\r\n\r\n            openPublisherPushItemDialog: openPublisherPushItemDialog,\r\n            openPublisherPullItemDialog: openPublisherPullItemDialog,\r\n\r\n            openPublisherPushFileDialog: openPublisherPushFileDialog,\r\n            openPublisherPullFileDialog: openPublisherPullFileDialog,\r\n\r\n            openConfigDialog: openConfigDialog,\r\n\r\n            openSyncDialog: openSyncDialog,\r\n\r\n            openServerDialog: openServerDialog,\r\n            openNewServerDialog: openNewServerDialog,\r\n\r\n            openCompareContent: openCompareContent,\r\n            openCompareMedia: openCompareMedia,\r\n        };\r\n\r\n        /////////////////\r\n\r\n        function getLocalItem(options) {\r\n            if (options.action !== undefined && options.action.metaData !== undefined && options.action.metaData !== null) {\r\n                return JSON.parse(options.action.metaData._syncLocalItem);\r\n            }\r\n\r\n            return options.items[0];\r\n        }\r\n\r\n        // settings \r\n        function openPublisherPushItemDialog(options, cb) {\r\n            openSyncDialog('Push settings', 'publisherDialog', options, cb, 'settingsPush');\r\n        }\r\n\r\n        function openPublisherPullItemDialog(options, cb) {\r\n            openSyncDialog('Pull settings', 'publisherDialog', options, cb, 'settingsPull');\r\n        }\r\n\r\n        // content \r\n        function openPublisherPushContent(options, cb) {\r\n            openSyncDialog('Publish Content', 'publisherDialog', options, cb, 'push');\r\n        }\r\n\r\n        function openPublisherPullContent(options, cb) {\r\n            openSyncDialog('Pull Content', 'publisherDialog', options, cb, 'pull');\r\n        }\r\n\r\n        // media \r\n        function openPublisherPushMedia(options, cb) {\r\n            openSyncDialog('Publish Media', 'publisherDialog', options, cb, 'push');\r\n        }\r\n\r\n        function openPublisherPullMedia(options, cb) {\r\n            openSyncDialog('Pull Media', 'publisherDialog', options, cb, 'pull');\r\n        }\r\n\r\n        function openPublisherPushFileDialog(options, cb) {\r\n            openSyncDialog('Push Files', 'publisherDialog', options, cb, 'filePush');\r\n        }\r\n\r\n        function openPublisherPullFileDialog(options, cb) {\r\n            openSyncDialog('Pull Files', 'publisherDialog', options, cb, 'filePull');\r\n        }\r\n\r\n        // server\r\n        function openConfigDialog(mode, server, callback) {\r\n\r\n            var options = {\r\n                hideItems: true,\r\n                serverAlias: server,\r\n                items: [\r\n                    { udi: 'umb://document-type/' + emptyGuid, name: 'ContentType' },\r\n                    { udi: 'umb://data-type/' + emptyGuid, name: 'DataType' },\r\n                    { udi: 'umb://media-type/' + emptyGuid, name: 'MediaType' }]\r\n            }\r\n\r\n            openDialog('Deploy Settings', 'publisherDialog', options, callback, 'config' + mode);\r\n        }\r\n\r\n        function openSyncDialog(dialogTitle, dialogView, options, cb, mode, size = 'small') {\r\n\r\n            if (options.entity !== undefined) {\r\n                options.items = [options.entity];\r\n            }\r\n\r\n            if (options.items.length === 1) {\r\n\r\n                var localItem = getLocalItem(options);\r\n                var dialogOptions = Object.assign({}, options);\r\n                dialogOptions.items = [localItem];\r\n\r\n                openDialog(dialogTitle, dialogView, dialogOptions, cb, mode, size);\r\n            }\r\n            else {\r\n                openDialog(dialogTitle, dialogView, options, cb, mode, size);\r\n            }\r\n        }\r\n\r\n        function openDialog(dialogTitle, dialogView, options, cb, mode, size) {\r\n\r\n            editorService.open({\r\n                options: options,\r\n                mode: mode,\r\n                single: options.items.length === 1,\r\n                title: dialogTitle,\r\n                size: size,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dialogs/' + dialogView + '.html',\r\n                submit: function (done) {\r\n                    editorService.close();\r\n                    navigationService.hideNavigation();\r\n                    if (cb !== undefined) {\r\n                        cb(true);\r\n                    }\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                    navigationService.hideNavigation();\r\n                    if (cb !== undefined) {\r\n                        cb(false);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // wrap in a timeout, get rid of the 'bounce' \r\n            //$timeout(function () {\r\n            //    navigationService.hideDialog();\r\n            //});\r\n        }\r\n\r\n\r\n        function openNewServerDialog(entity, cb, url = '') {\r\n            editorService.open({\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dialogs/addServer.html',\r\n                title: 'Add Server',\r\n                size: 'small',\r\n                url: url,\r\n                placeholder: url.length == 0 ? 'Server name' : 'name for this server',\r\n                submit: function (model) {\r\n                    editorService.close();\r\n                    navigationService.hideNavigation();\r\n                    openServerDialog(model.alias, cb);\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                    navigationService.hideNavigation();\r\n                    if (cb !== undefined) {\r\n                        cb(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function openServerDialog(alias, cb) {\r\n            editorService.open({\r\n                serverAlias: alias,\r\n                title: 'Server View',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'backoffice/uSyncPublisher/server.html',\r\n                submit: function (done) {\r\n                    $rootScope.$broadcast('usync-publisher-settings-reload');\r\n                    navigationService.hideNavigation();\r\n                    editorService.close();\r\n                    if (cb !== undefined) {\r\n                        cb(true);\r\n                    }\r\n                },\r\n                close: function () {\r\n                    $rootScope.$broadcast('usync-publisher-settings-reload');\r\n                    navigationService.hideNavigation();\r\n                    editorService.close();\r\n                    if (cb !== undefined) {\r\n                        cb(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        function openCompareMedia(options, cb) {\r\n            entityResource.getById(options.entity.id, \"Media\")\r\n                .then(function (entity) {\r\n                    openCompare(entity, 'IMedia', cb);\r\n                });\r\n        }\r\n\r\n        function openCompareContent(options, cb) {\r\n            entityResource.getById(options.entity.id, \"Document\")\r\n                .then(function (entity) {\r\n                    openCompare(entity, 'IContent', cb);\r\n                });\r\n        }\r\n\r\n        function openCompare(entity, type, cb) {\r\n\r\n            editorService.open({\r\n                title: 'Compare remote',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dialogs/detail.html',\r\n                entity: entity,\r\n                viewFirst: true,\r\n                item: {\r\n                    itemType: type\r\n                },\r\n                showServers: true,\r\n                close: function () {\r\n                    editorService.close();\r\n                    navigationService.hideNavigation();\r\n                    if (cb !== undefined) {\r\n                        cb(false);\r\n                    }\r\n                }\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncPublishDialogManager', dialogManager);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function serverManager(overlayService, notificationsService, uSyncPublishService) {\r\n\r\n        return {\r\n            checkServer: checkServer,\r\n            checkServerByUrl: checkServerByUrl,\r\n\r\n            createLocalApiKeys: createLocalApiKeys,\r\n            remoteSetup: remoteSetup,\r\n            syncSettings: syncSettings\r\n        };\r\n   \r\n        function checkServer(alias, showSuccessBar, callback) {\r\n            uSyncPublishService.checkServer(alias)\r\n                .then(function (result) {\r\n\r\n                    if (showSuccessBar) {\r\n                        notificationsService.success('Connected', 'Server connection setup');\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(result.data);\r\n                    }\r\n                }, function (error) {\r\n                    notificationsService.error('error', error.data.exceptionMessage);\r\n                    if (callback) {\r\n                        callback(null);\r\n                    }\r\n                });\r\n        }\r\n\r\n        function checkServerByUrl(url, callback) {\r\n            uSyncPublishService.checkServerUrl(url)\r\n                .then(function (result) {\r\n                    if (callback) {\r\n                        callback(result.data);\r\n                    }\r\n                }, function (error) {\r\n                    if (callback) {\r\n                        callback({\r\n                            Status: 'Error',\r\n                            Message: error.data.ExceptionMessage\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        function createLocalApiKeys() {\r\n            var overlay = {\r\n                title: 'Generate security keys',\r\n                subtitle: 'Generate a required security id and key',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'remote/setupkeys.html',\r\n                isModal: true,\r\n                showResult: false,\r\n                busy: false,\r\n                disableBackdropClick: true,\r\n                disableEscapeKey: true,\r\n                skipFormValidation: true,\r\n                submitButtonLabel: 'Generate security key config',\r\n                closeButtonLabel: 'Not now',\r\n                submit: function (model) {\r\n                    // create keys. \r\n                    uSyncPublishService.createKeys()\r\n                        .then(function (result) {\r\n                            model.result = result.data;\r\n                            model.hideSubmitButton = true;\r\n                            model.closeButtonLabel = 'Close';\r\n                            model.showResult = true;\r\n                        }, function (error) {\r\n                            notificationsService.error('Error', 'Unable to setup server');\r\n                            overlayService.close();\r\n                        });\r\n                },\r\n                close: function () {\r\n                    // save settings\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n        }\r\n\r\n\r\n\r\n        function remoteSetup(server, callback) {\r\n\r\n            var overlay = {\r\n                title: 'Setup ' + server.name,\r\n                subtitle: 'Setup API connection to ' + server.url,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'remote/remoteOverlay.html',\r\n                server: server,\r\n                isModal: true,\r\n                busy: false,\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                skipFormValidation: true,\r\n                disableSubmitButton: true,\r\n                submitButtonLabel: 'Continue',\r\n                closeButtonLabel: 'Close',\r\n                submit: function (model) {\r\n\r\n                    // do the actual login stuff here.... \r\n                    model.busy = true;\r\n                    disableSubmitButton: true,\r\n\r\n                        uSyncPublishService.setupServer(model.server.alias, model.server.url, model.username, model.password)\r\n                        .then(function (result) {\r\n                                if (result.data.Success) {\r\n\r\n                                    notificationsService.success('Success', result.data.message);\r\n\r\n                                    overlayService.close();\r\n\r\n                                    if (callback) {\r\n                                        callback(result.data.success);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    model.busy = false;\r\n                                    model.showError = true;\r\n                                    model.error = result.data.message;\r\n                                }\r\n                            }, function (error) {\r\n                                notificationsService.error('Error', 'Unable to setup server');\r\n                                if (callback) {\r\n                                    callback(false);\r\n                                }\r\n                                overlayService.close();\r\n                            });\r\n\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n        }\r\n\r\n\r\n        function syncSettings(callback) {\r\n            var overlay = {\r\n                title: 'Sync Settings',\r\n                subtitle: 'Syncronize publisher settings between servers',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'remote/syncSetup.html',\r\n                isModal: true,\r\n                servers: [],\r\n                busy: false,\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                disableSubmitButton: true,\r\n                skipFormValidation: true,\r\n                submitButtonLabel: 'Syncronize',\r\n                closeButtonLabel: 'Close',\r\n                submit: function (model) {\r\n\r\n                    // do the actual login stuff here.... \r\n                    model.busy = true;\r\n\r\n                    if (model.servers.length > 0) {\r\n                        uSyncPublishService.syncSettings(model.servers)\r\n                            .then(function (result) {\r\n                                overlayService.close();\r\n                                if (callback) {\r\n                                    callback(result.data.success);\r\n                                }\r\n                                if (result.data.success) {\r\n                                    notificationsService.success('Success', 'Server settings synced');\r\n                                }\r\n                                else {\r\n                                    notificationsService.warning('Sync Issue', 'One or more servers failed to sync - see browser console for details');\r\n                                    console.warn('Sync Failures: ', result.data.servers);\r\n                                }\r\n                            }, function (error) {\r\n                                notificationsService.error('Error', 'Unable to setup server');\r\n                                console.error('sync error', error);\r\n                                if (callback) { callback(false); }\r\n                                overlayService.close();\r\n                            });\r\n                    }\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncPublishServerManager', serverManager);\r\n\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope) {\r\n\r\n        var vm = this;\r\n\r\n        vm.model = $scope.model;\r\n        vm.server = $scope.model.server;\r\n\r\n        vm.allowedPicker = vm.model.allowedPicker;\r\n        vm.userGroupPicker = vm.model.userGroupPicker;\r\n\r\n        vm.hasContent = hasContent;\r\n        vm.hasSettings = hasSettings;\r\n        vm.hasFiles = hasFiles;\r\n\r\n        vm.toggleContent = toggleContent;\r\n        vm.toggleSettings = toggleSettings;\r\n        vm.toggleFiles = toggleFiles;\r\n\r\n        ////\r\n        function hasContent() {\r\n            return vm.server.sendSettings.includeChildren.indexOf('yes') != -1;\r\n        }\r\n\r\n        function hasSettings() {\r\n            return vm.server.sendSettings.includeDependencies.indexOf('yes') != -1;\r\n        }\r\n\r\n        function hasFiles() {\r\n            return vm.server.sendSettings.includeFiles.indexOf('yes') != -1;\r\n        }\r\n\r\n        function toggleContent() {\r\n            if (vm.server.sendSettings.includeChildren.indexOf('yes') == -1) {\r\n\r\n                vm.server.sendSettings.includeChildren = 'user-yes';\r\n                vm.server.sendSettings.deleteMissing = 'user-yes';\r\n                vm.server.sendSettings.includeMedia = 'yes';\r\n            }\r\n            else {\r\n                vm.server.sendSettings.includeChildren = 'no';\r\n                vm.server.sendSettings.deleteMissing = 'no';\r\n                vm.server.sendSettings.includeMedia = 'no';\r\n            }\r\n        }\r\n\r\n        function toggleSettings() {\r\n            if (vm.server.sendSettings.includeDependencies.indexOf('yes') == -1) {\r\n                vm.server.sendSettings.includeDependencies = 'yes';\r\n                vm.server.sendSettings.includeConfig = 'yes';\r\n            }\r\n            else {\r\n                vm.server.sendSettings.includeDependencies = 'no';\r\n                vm.server.sendSettings.includeConfig = 'no';\r\n            }\r\n        }\r\n\r\n        function toggleFiles() {\r\n            if (vm.server.sendSettings.includeFiles.indexOf('yes') == -1) {\r\n                vm.server.sendSettings.includeFiles = 'yes';\r\n            }\r\n            else {\r\n                vm.server.sendSettings.includeFiles = 'no';\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('publisherServerSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function pickerController($scope, editorService) {\r\n        var vm = this;\r\n        vm.loaded = false; \r\n\r\n        vm.value = $scope.model.value;\r\n\r\n        vm.open = open;\r\n        vm.remove = remove;\r\n\r\n        vm.sortOptions = {\r\n            axis: \"y\",\r\n            containment: \"parent\",\r\n            distance: 10,\r\n            opacity: 0.7,\r\n            tolerance: \"pointer\",\r\n            scroll: true,\r\n            cursor: \"move\",\r\n            zIndex: 6000\r\n        };\r\n\r\n        // load.\r\n        vm.loaded = true;\r\n\r\n        /////////////\r\n        function open() {\r\n            var options = {\r\n                title: 'Server Picker',\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'serverPicker/serverPickerDialog.html',\r\n                size: 'small',\r\n                submit: function (options) { \r\n                    editorService.close();\r\n\r\n                    if (options !== undefined) {\r\n                        vm.value.push(options);\r\n                    }\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            }\r\n\r\n            editorService.open(options);\r\n        }\r\n\r\n        function remove(server) {\r\n            for (let i = 0; i < vm.value.length; i++) {\r\n                if (vm.value[i].alias === server.alias) {\r\n                    vm.value.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherServerPickerController', pickerController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function serverPickerDialogController($scope, uSyncPublishService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loading = true; \r\n        vm.server = {};\r\n        vm.selectedServer = null;\r\n\r\n        vm.options = {\r\n            alias: '',\r\n            icon: '',\r\n            push: true,\r\n            pull: true,\r\n            name: '',\r\n        };\r\n\r\n        vm.submit = submit;\r\n        vm.close = close; \r\n        vm.select = select;\r\n        vm.valid = valid;\r\n\r\n        uSyncPublishService.getAllServers()\r\n            .then(function (result) {\r\n                vm.servers = result.data;\r\n                vm.loading = false;\r\n            });\r\n\r\n        ////////////////\r\n\r\n        function select(server) {\r\n            vm.selectedServer = server;\r\n            vm.options.alias = server.alias;\r\n            vm.options.name = server.name;\r\n            vm.options.icon = server.icon;\r\n        }\r\n\r\n        function submit() {\r\n            if ($scope.model.submit) {\r\n                $scope.model.submit(vm.options);\r\n            }\r\n        }\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function valid() {\r\n\r\n            if (vm.selectedServer === null) {\r\n                return false;\r\n            }\r\n\r\n            if (vm.options.pull === false && vm.options.push === false) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublishServerpickerDialogController', serverPickerDialogController);\r\n\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function cacheService($http) {\r\n\r\n        var cacheService = Umbraco.Sys.ServerVariables.uSyncComplete.cacheService;\r\n\r\n        return {\r\n            getStatus: getStatus,\r\n            toggleCaches: toggleCaches,\r\n            clearCaches: clearCaches,\r\n\r\n            getAllUdis: getAllUdis,\r\n            cacheItems: cacheItems,\r\n\r\n            flush: flush\r\n        };\r\n\r\n        //////////\r\n\r\n        function getStatus(set) {\r\n            return $http.get(cacheService + \"GetCacheStatus?set=\" + set);\r\n        }\r\n\r\n        function toggleCaches(enabled, set) {\r\n            return $http.post(cacheService + \"ToggleCaches?enabled=\" + enabled + \"&set=\" + set);\r\n        }\r\n        \r\n\r\n        function clearCaches(set) {\r\n            return $http.post(cacheService + \"ClearCaches?set=\" + set);\r\n        }\r\n\r\n        function getAllUdis(type) {\r\n            return $http.get(cacheService + \"GetAllUdis?type=\" + type);\r\n        }\r\n\r\n        function cacheItems(type, set, udis) {\r\n            return $http.post(cacheService + \"CacheItems?type=\" + type + \"&set=\" + set, udis);\r\n        }\r\n\r\n        function flush(set) {\r\n            return $http.post(cacheService + \"Flush?set=\" + set);\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncCacheService', cacheService);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function publishService($http) {\r\n\r\n        var publishService = Umbraco.Sys.ServerVariables.uSyncPublisher.publishService;\r\n\r\n        var dependencyFlags = {\r\n            none: 0,\r\n            includeChildren: 2,\r\n            includeAncestors: 4,\r\n            includeDependencies: 8,\r\n            includeFiles: 16,\r\n            includeMedia: 32,\r\n            includeLinked: 64,\r\n            includeMediaFiles: 128,\r\n            includeConfig: 256\r\n        };\r\n\r\n        return {\r\n          \r\n            // Server checks \r\n            getServers: getServers,\r\n            getServer: getServer,\r\n            getServerByUrl: getServerByUrl,\r\n            getAllServers: getAllServers,\r\n            checkServer: checkServer,\r\n            checkServerUrl: checkServerUrl,\r\n            getPublishers: getPublishers,\r\n\r\n            // servers \r\n            saveServer: saveServer,\r\n            deleteServer: deleteServer,\r\n            setupServer: setupServer,\r\n            syncSettings: syncSettings,\r\n\r\n            // media \r\n            getMediaFolders: getMediaFolders,\r\n            getContentFolders: getContentFolders,\r\n            getLocalContentFolders: getLocalContentFolders,\r\n            getLocalMediaFolders: getLocalMediaFolders,\r\n            getContentChanges: getContentChanges,\r\n            getMediaChanges: getMediaChanges,\r\n\r\n            getContentEntity: getContentEntity,\r\n            getMediaEntity: getMediaEntity,\r\n\r\n            // settings\r\n            getSettings: getSettings,\r\n            saveSettings: saveSettings,\r\n            reloadSettings: reloadSettings,\r\n            getVersion: getVersion,\r\n            createKeys: createKeys,\r\n            getUserGroups: getUserGroups,\r\n\r\n            setServerOrder: setServerOrder,\r\n\r\n            // until\r\n            getDecendentCount: getDecendentCount,\r\n\r\n            // flags\r\n            getFlags: getFlags,\r\n            getTemplates: getTemplates,\r\n\r\n            hasContentOrMedia: hasContentOrMedia\r\n\r\n        };\r\n\r\n        function getFlags(options) {\r\n            var flags = 0;\r\n            if (options.includeChildren.value) { flags |= dependencyFlags.includeChildren; }\r\n            if (options.includeAncestors.value) { flags |= dependencyFlags.includeAncestors; }\r\n            if (options.includeDependencies.value) { flags |= dependencyFlags.includeDependencies; }\r\n            if (options.includeFiles.value) { flags |= dependencyFlags.includeFiles; }\r\n            if (options.includeMedia.value) { flags |= dependencyFlags.includeMedia; }\r\n            if (options.includeLinked.value) { flags |= dependencyFlags.includeLinked; }\r\n            if (options.includeMediaFiles) { flags |= dependencyFlags.includeMediaFiles; }\r\n            if (options.includeConfig?.value) { flags |= dependencyFlags.includeConfig; }\r\n\r\n            return flags;\r\n        }\r\n\r\n        ///////////////////\r\n        /// server checks\r\n\r\n        function getServers(action) {\r\n            return $http.get(publishService + 'GetServers/?action=' + action);\r\n        }\r\n\r\n        function getServer(alias) {\r\n            return $http.get(publishService + 'GetServer/?alias=' + alias);\r\n        }\r\n\r\n        function getServerByUrl(url) {\r\n            return $http.get(publishService + 'GetServerByUrl/?url=' + url);\r\n        }\r\n\r\n        function checkServer(alias) {\r\n            return $http.get(publishService + 'CheckServer/?server=' + alias);\r\n        }\r\n\r\n        function checkServerUrl(url) {\r\n            return $http.get(publishService + 'CheckServerUrl/?url=' + url);\r\n        }\r\n\r\n        function getAllServers() {\r\n            return $http.get(publishService + 'GetAllServers/?enabledOnly=' + false);\r\n        }\r\n\r\n        function setupServer(alias, url, user, pass) {\r\n            return $http.post(publishService + 'setupServer', {\r\n                server: alias,\r\n                url: url,\r\n                username: user,\r\n                password: pass\r\n            });\r\n        }\r\n\r\n        function syncSettings(servers) {\r\n            return $http.post(publishService + 'SyncSettings', {\r\n                servers: servers\r\n            });\r\n        }\r\n\r\n        function getPublishers() {\r\n            return $http.get(publishService + 'GetPublishers');\r\n        }\r\n\r\n        /// browsing\r\n\r\n        function getMediaFolders(key,server, page) {\r\n            return $http.get(publishService + 'GetMediaFolders?id=' + key + '&server=' + server + \"&page=\" + page);\r\n        }\r\n\r\n        function getContentFolders(key, server, page) {\r\n            return $http.get(publishService + 'GetContentFolders?id=' + key + '&server=' + server + \"&page=\" + page);\r\n        }\r\n\r\n        function getLocalContentFolders(key, page) {\r\n            return $http.get(publishService + 'GetLocalContentFolders?id=' + key + \"&page=\" + page );\r\n        }\r\n\r\n        function getLocalMediaFolders(key, page) {\r\n            return $http.get(publishService + 'GetLocalMediaFolders?id=' + key + \"&page=\" + page);\r\n        }\r\n\r\n        function getContentChanges(ids, server) {\r\n            return $http.post(publishService + 'CalculateContentChanges/?server=' + server, ids);\r\n        }\r\n\r\n        function getMediaChanges(ids, server) {\r\n            return $http.post(publishService + 'CalculateMediaChanges/?server=' + server, ids);\r\n        }\r\n\r\n        function getContentEntity(key, server) {\r\n            return $http.get(publishService + 'GetContentEntity?id=' + key + '&server=' + server);\r\n        }\r\n\r\n        function getMediaEntity(key, server) {\r\n            return $http.get(publishService + 'GetMediaEntity?id=' + key + '&server=' + server);\r\n        }\r\n\r\n        ///////////////////\r\n        // settings get/set\r\n\r\n        function getSettings() {\r\n            return $http.get(publishService + 'GetSettings');\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(publishService + 'SaveSettings', settings);\r\n        }\r\n\r\n        function reloadSettings() {\r\n            return $http.get(publishService + 'ReloadSettings');\r\n        }\r\n\r\n        function getVersion() {\r\n            return $http.get(publishService + 'GetVersion');\r\n        }\r\n\r\n        function createKeys() {\r\n            return $http.get(publishService + 'CreateKeys');\r\n        }\r\n\r\n        function getUserGroups() {\r\n            return $http.get(publishService + 'GetUserGroups');\r\n        }\r\n\r\n        function saveServer(server) {\r\n            return $http.post(publishService + 'SaveServer', server);\r\n        }\r\n\r\n        function deleteServer(alias) {\r\n            return $http.delete(publishService + 'DeleteServer/?server=' + alias);\r\n        }\r\n\r\n        function setServerOrder(order) {\r\n            return $http.post(publishService + 'SetServerOrder', order);\r\n        }\r\n\r\n        function getDecendentCount(id) {\r\n            return $http.get(publishService + 'DecendentCount?id=' + id);\r\n        }\r\n\r\n        function getTemplates() {\r\n            return $http.get(publishService + 'GetTemplates');\r\n        }\r\n\r\n        function hasContentOrMedia(checkEnabled) {\r\n            return $http.get(publishService + 'HasContentOrMedia?checkEnabled=' + checkEnabled);\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncPublishService', publishService);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function publishingService($http) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSyncPublisher.publisherService;\r\n\r\n\r\n        return {\r\n            getAction: getAction,\r\n            performAction: performAction,\r\n            clean: clean\r\n        };\r\n\r\n        ////////////\r\n\r\n        function getAction(request) {\r\n            return $http.post(serviceRoot + 'GetAction', request);\r\n        }\r\n\r\n        function performAction(request) {\r\n            return $http.post(serviceRoot + 'PerformAction', request);\r\n        }\r\n\r\n        function clean(id, server) {\r\n            return $http.delete(serviceRoot + `clean/?id=${id}&server=` + server);\r\n        }\r\n    };\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncPublishingService', publishingService);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($timeout, $rootScope, navigationService, overlayService,\r\n        uSyncPublishService, uSyncPublishServerManager) {\r\n\r\n        var vm = this;\r\n        vm.selectItem = selectItem;\r\n\r\n        var title = 'uSync Publisher';\r\n        var description = 'Push and pull content from other Umbraco installations';\r\n\r\n        vm.page = {\r\n            title: title,\r\n            description: description,\r\n            version: Umbraco.Sys.ServerVariables.uSyncPublisher.dllVersion,\r\n            navigation: [\r\n                {\r\n                    'name': 'Publisher',\r\n                    'alias': 'publisher',\r\n                    'icon': 'icon-truck',\r\n                    'description': description,\r\n                    'view': Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dashboard/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Advanced',\r\n                    'description': 'Default settings used as a base for all servers in config',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dashboard/settings.html',\r\n                },\r\n                {\r\n                    'name': 'Cache',\r\n                    'description': 'Caching dependencies and exports make publishing faster',\r\n                    'alias': 'cache',\r\n                    'icon': 'icon-flash',\r\n                    'view': Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dashboard/cache.html'\r\n                },\r\n                {\r\n                    'name': 'Sync',\r\n                    'description': 'Quickly get this install in sync with another server',\r\n                    'alias': 'sync',\r\n                    'icon': 'icon-infinity',\r\n                    'view': Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dashboard/blank.html'\r\n                }\r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: 'uSyncPublisher', path: '-1' });\r\n        });\r\n\r\n        vm.save = saveSettings;\r\n        vm.sync = syncSettings;\r\n\r\n        function saveSettings() {\r\n            $rootScope.$broadcast('usync-publisher-settings-save');\r\n        }\r\n\r\n        function selectItem(item) {\r\n            vm.page.title = title;\r\n            vm.page.description = item.description;\r\n\r\n            if (item.name !== 'Publisher') {\r\n                vm.page.title += ' - ' + item.name;\r\n            }\r\n        }\r\n\r\n        function syncSettings() {\r\n            uSyncPublishServerManager.syncSettings(function (success) {\r\n                if (success) {\r\n\r\n                }\r\n                else {\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        vm.getJson = getJson;\r\n\r\n        function getJson() {\r\n\r\n            uSyncPublishService.getAllServers()\r\n                .then(function (result) {\r\n                    var servers = result.data;\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'dashboard/serverjson.html',\r\n                        title: 'Server config',\r\n                        content: JSON.stringify(servers, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherDashboardController', dashboardController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function deleteController(\r\n        $rootScope,\r\n        $scope,\r\n        treeService,\r\n        navigationService,\r\n        notificationsService,\r\n        uSyncPublishService) {\r\n        var vm = this;\r\n\r\n        vm.alias = $scope.currentNode.id;\r\n\r\n        vm.cancel = cancel;\r\n        vm.performDelete = performDelete;\r\n\r\n        ///////\r\n        function performDelete() {\r\n            uSyncPublishService.deleteServer(vm.alias)\r\n                .then(function (result) {\r\n\r\n                    var rootNode = treeService.getTreeRoot($scope.currentNode);\r\n                    treeService.removeNode($scope.currentNode);\r\n                    navigationService.hideMenu();\r\n\r\n                    notificationsService.success(\"deleted\", \"Server has been removed\");\r\n\r\n                    $rootScope.$broadcast('usync-publish-server-delete');\r\n                });\r\n        }\r\n\r\n\r\n        function cancel() {\r\n            navigationService.hideDialog();\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublishDeleteController', deleteController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function serverSettingsController($scope, $routeParams, $timeout, $http,\r\n        $rootScope, navigationService, notificationsService, localizationService,\r\n        uSyncPublishService, uSyncPublishDialogManager,\r\n        uSyncPublishServerManager) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        vm.checked = false;\r\n        vm.showClose = false;\r\n        vm.showAdvanced = true;\r\n        vm.errorDesc = '';\r\n\r\n        vm.selectItem = selectItem;\r\n\r\n        var pluginPath = Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath;\r\n\r\n        vm.page = {\r\n            title: '[Server name]',\r\n            description: '[Server description]',\r\n            navigation: [\r\n                {\r\n                    'name': 'Server',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-server',\r\n                    'description': 'Settings',\r\n                    'view': pluginPath + 'server/settings.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Permissions',\r\n                    'alias': 'permissions',\r\n                    'icon': 'icon-combination-lock',\r\n                    'description': 'a',\r\n                    'view': pluginPath + 'server/permissions.html',\r\n                },\r\n                {\r\n                    'name': 'Advanced',\r\n                    'alias': 'advanced',\r\n                    'icon': 'icon-settings-alt',\r\n                    'description': 'b',\r\n                    'view': pluginPath + 'server/advanced.html',\r\n                }\r\n            ]\r\n        };\r\n\r\n        function selectItem(item) {\r\n            // load something on tab swap ?\r\n        }\r\n\r\n        vm.buttonState = 'init';\r\n        vm.checkStatus = 'init';\r\n        vm.checkStatusButton = 'Check access';\r\n\r\n        vm.status = { enabled: false };\r\n        vm.server = {\r\n            id: '',\r\n            sendSettings: { groups: ['admin','editor'] },\r\n            icon: 'icon-server',\r\n            allowedServers: []\r\n        };\r\n\r\n\r\n        vm.syncbuttons = {\r\n            defaultButton: {\r\n                labelKey: 'usyncpublish_deploy',\r\n                handler: deploy\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usyncpublish_pullDeploy',\r\n                handler: pullDeploy\r\n            }]\r\n        };\r\n\r\n        vm.save = save;\r\n        vm.close = close;\r\n        vm.checkServer = checkServer;\r\n        vm.deploy = deploy;\r\n        vm.pullDeploy = pullDeploy;\r\n\r\n        vm.remoteSetup = remoteSetup;\r\n        \r\n        $timeout(function () {\r\n            if (!vm.showClose) {\r\n                navigationService.syncTree({ tree: \"uSyncPublisher\", path: vm.alias });\r\n            }\r\n        });\r\n     \r\n        Init();\r\n\r\n        function Init() {\r\n\r\n            getSettings();\r\n\r\n            // load all the publishers.\r\n            uSyncPublishService.getPublishers()\r\n                .then(function (result) {\r\n                    vm.publishers = result.data;\r\n                });\r\n\r\n\r\n            var serverAlias = $routeParams.id;\r\n            if ($scope.model != null) {\r\n                serverAlias = $scope.model.serverAlias;\r\n                vm.showClose = true;\r\n            }\r\n\r\n            if (vm.alias !== serverAlias) {\r\n                vm.alias = serverAlias;\r\n                if (vm.alias !== '-1') {\r\n                    loadServer();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        ////////////////\r\n\r\n        function getSettings() {\r\n            uSyncPublishService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n\r\n                    if (!vm.settings.hasAppId) {\r\n                        uSyncPublishServerManager.createLocalApiKeys();\r\n                    }\r\n                });\r\n        }\r\n\r\n\r\n        function loadServer() {\r\n            uSyncPublishService.getServer(vm.alias)\r\n                .then(function (result) {\r\n                    vm.server = result.data;\r\n\r\n                    if (!vm.server) {\r\n                        vm.server = {};\r\n                    }\r\n\r\n                    initPicker();\r\n                    checkServer(false);\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function initPicker() {\r\n\r\n            if (vm.server.allowedServers === undefined || vm.server.allowedServers === null || vm.server.allowedServers.length === 0) {\r\n                vm.server.allowedServers = [];\r\n            }\r\n\r\n            vm.allowedPicker = {\r\n                value: vm.server.allowedServers,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'serverPicker/picker.html',\r\n                validation: {\r\n                    mandatory: true\r\n                },\r\n                config: {\r\n                    multiPicker: false\r\n                }\r\n            };\r\n\r\n            vm.userGroupPicker = {\r\n                value: vm.server.sendSettings,\r\n                view: Umbraco.Sys.ServerVariables.uSyncPublisher.pluginPath + 'pickers/userGroupPicker.html',\r\n                validation: {\r\n                    mandatory: false\r\n                },\r\n                config: {}\r\n            };\r\n\r\n        }\r\n\r\n        function save()\r\n        {\r\n            vm.saved = false;\r\n            vm.buttonState = 'busy';\r\n\r\n            uSyncPublishService.saveServer(vm.server)\r\n                .then(function (result) {\r\n                    vm.buttonState = 'success';\r\n                    notificationsService.success('Saved', vm.server.alias + ' server settings have been updated');\r\n                    navigationService.syncTree({ tree: 'uSyncPublisher', path: [\"-1\", vm.server.alias], forceReload: true });\r\n                    vm.saved = true;\r\n                    vm.checked = false;\r\n                    // event so sub setting views can act if they need to.\r\n                    $rootScope.$broadcast('usync-publish-serverSave');\r\n                    checkServer(false);\r\n                    Init();\r\n\r\n                }, function (error) {\r\n                    vm.buttonState = 'error';\r\n                    notificationsService.error('error', error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function checkServer(showSuccessBar) {\r\n\r\n            vm.checked = true;\r\n            vm.checkStatus = 'busy';\r\n            vm.status = {};\r\n\r\n            uSyncPublishServerManager.checkServer(vm.server.alias, showSuccessBar,\r\n                function (status) {\r\n                    vm.status = status;\r\n                    if (status != null) {\r\n                        vm.checkStatus = 'success';\r\n                        vm.checkStatusButton = status;\r\n                        vm.saved = false;\r\n                        $timeout(() => {\r\n                            vm.checked = false;\r\n                        }, 3500);\r\n                    }\r\n                    else {\r\n                        getServerError(status);\r\n                        vm.checkStatus = 'error';\r\n                    }\r\n                });\r\n        }\r\n\r\n        function getServerError(status) {\r\n\r\n            console.log('getServerError', status);\r\n\r\n            if (!status.enabled) {\r\n                localizationService.localize(\"usyncpublish_error_\" + status.status.toLowerCase())\r\n                    .then(function (value) {\r\n                        if (value.startsWith('[') && value.endsWith(']')) {\r\n                            vm.errorDesc = status.status;\r\n                        }\r\n                        else {\r\n                            vm.errorDesc = value;\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n\r\n        function deploy() {\r\n            uSyncPublishDialogManager.openConfigDialog(\"Push\", vm.server.alias, function () { });\r\n        }\r\n\r\n        function pullDeploy() {\r\n            uSyncPublishDialogManager.openConfigDialog(\"Pull\", vm.server.alias, function () { });\r\n        }\r\n\r\n\r\n        function remoteSetup(server) {\r\n            uSyncPublishServerManager.remoteSetup(server, function (success) {\r\n                checkServer(false);\r\n                vm.checked = true;\r\n            });\r\n        }\r\n\r\n        var unsubscribe = [];\r\n\r\n        unsubscribe.push($scope.$watch('vm.server.Publisher', function (newValue) {\r\n            if (newValue !== undefined) {\r\n\r\n                var pub = _.find(vm.publishers, function (pub) { return pub.alias === newValue; });\r\n                if (pub != null) {\r\n                    vm.publisherDescription = pub.description;\r\n                }\r\n            }\r\n        }));\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in unsubscribe) {\r\n                unsubscribe[u]();\r\n            }\r\n        });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherServerSettingsController', serverSettingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function serverSortController($scope, $rootScope,\r\n        navigationService,\r\n        notificationsService,\r\n        uSyncPublishService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n\r\n        vm.sortOrder = {};\r\n        vm.servers = [];\r\n\r\n        vm.sortableOptions = {\r\n            distance: 10,\r\n            tolerance: 'pointer',\r\n            opacity: 0.7,\r\n            scroll: true,\r\n            cursor: 'move',\r\n            helper: fixSortableHelper,\r\n            update: function () {\r\n                vm.sortOrder.column = '';\r\n                vm.sortOrder.reverse = false;\r\n            }\r\n        };\r\n\r\n        vm.save = save;\r\n        vm.close = close;\r\n        vm.sort = sort;\r\n\r\n        init();\r\n\r\n        function init() {\r\n\r\n            vm.loading = true;\r\n            uSyncPublishService.getAllServers()\r\n                .then(function (result) {\r\n                    vm.servers = result.data;\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        /////////////\r\n\r\n        function sort(column) {\r\n\r\n        }\r\n\r\n\r\n        function save() {\r\n\r\n            vm.saveButtonState = \"busy\";\r\n\r\n            var order = [];\r\n\r\n            for (let i = 0; i < vm.servers.length; i++) {\r\n                order.push(vm.servers[i].alias);\r\n            }\r\n\r\n            uSyncPublishService.setServerOrder(order)\r\n                .then(function (result) {\r\n\r\n                    navigationService.syncTree({ tree: \"uSyncPublisher\", path: $scope.currentNode.path, forceReload: true })\r\n                        .then(() => navigationService.reloadNode($scope.currentNode));\r\n\r\n                    $rootScope.$broadcast('usync-publish-server-sort');\r\n\r\n\r\n                    vm.saveButtonState = \"success\";\r\n                }, function (error) {\r\n                    vm.error = error;\r\n                    vm.saveButtonState = \"error\";\r\n                });\r\n        }\r\n\r\n        function close() {\r\n            navigationService.hideDialog();\r\n        }\r\n\r\n        ////////\r\n        function fixSortableHelper(e, ui) {\r\n            // keep the correct width of each table cell when sorting\r\n            ui.children().each(function () {\r\n                $(this).width($(this).width());\r\n            });\r\n            return ui;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherServerSortController', serverSortController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n    function completeController($scope) {\r\n        $scope.vm.complete = true;\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherCompleteController', completeController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function configPullController($scope, uSyncPublishService) {\r\n\r\n        var unsubscribe = [];\r\n\r\n        var pvm = this;\r\n\r\n        // simple toggles.\r\n        pvm.syncSettings = false;\r\n        pvm.syncContent = false;\r\n        pvm.syncMedia = false;\r\n\r\n        // config from the parent. \r\n        pvm.mode = $scope.vm.mode;\r\n        pvm.contentType = $scope.vm.contentType;\r\n\r\n        // options stored on the parent.\r\n        pvm.process = $scope.vm.process;\r\n        \r\n        pvm.flags = {\r\n            includeChildren: { toggle: true, value: true },\r\n            includeDecendants: { toggle: true, value: true },\r\n            includeMedia: { toggle: false, value: false },\r\n            includeLinked: { toggle: false, value: false },\r\n            includeAncestors: { toggle: false, value: false },\r\n            includeDependencies: { toggle: false, value: false },\r\n            includeFiles: { toggle: false, value: true },\r\n            includeMediaFiles: { toggle: false, value: false },\r\n            deleteMissing: { toggle: false, value: false },\r\n            includeSystemFiles: { toggle: false, value: false }\r\n        };\r\n\r\n        pvm.flagsValue = uSyncPublishService.getFlags(pvm.flags);\r\n\r\n        var emptyGuid = '00000000-0000-0000-0000-000000000000';\r\n        var emptyString = '';\r\n\r\n        pvm.items = {\r\n            docTypes: { toggle: true, value: true, typeName: 'document-type', root: emptyGuid, name: 'Document types' },\r\n            dataTypes: { toggle: true, value: true, typeName: 'data-type', root: emptyGuid, name: 'Data types' },\r\n            mediaTypes: { toggle: true, value: true, typeName: 'media-type', root: emptyGuid, name: 'Media types' },\r\n            domains: { toggle: true, value: true, typeName: 'domain', root: emptyGuid, name: 'Domain settings' },\r\n            memberTypes: { toggle: true, value: true, typeName: 'member-type', root: emptyGuid, name: 'Member types' },\r\n            dictionary: { toggle: true, value: true, typeName: 'dictionary-item', root: emptyGuid, name: 'Dictionary items' },\r\n            macro: { toggle: true, value: true, typeName: 'macro', root: emptyGuid, name: 'Macros' },\r\n            template: { toggle: true, value: true, typeName: 'template', root: emptyGuid, name: 'Templates' },\r\n            files: { toggle: true, value: true, typeName: null, root: emptyString, name: 'Files' },\r\n            systemFiles: { toggle: true, value: false, typeName: null, root: emptyString, name: '' },\r\n            languages: { toggle: true, value: true, typeName: 'language', root: emptyString, name: 'Languages' },\r\n            protect: { toggle: true, value: true, typeName: 'protect', root: emptyGuid, name: 'Public access settings' },\r\n            content: { toggle: true, value: false, typeName: 'document', root: emptyGuid, name: 'Content' },\r\n            media: { toggle: true, value: false, typeName: 'media', root: emptyGuid, name: 'Media' },\r\n            relationTypes: { toggle: true, value: true, typeName: 'relation-type', root: emptyGuid }\r\n        };\r\n\r\n        // used in the UI, not the logic.\r\n        pvm.server = $scope.vm.selectedServer;\r\n\r\n        var item = $scope.vm.items[0];\r\n\r\n        var contentName = item.name;\r\n\r\n        if ($scope.vm.headings !== undefined) {\r\n            $scope.vm.headings.title = 'PULL settings';\r\n            $scope.vm.headings.description = 'PULL settings from ' + pvm.server.name\r\n        }\r\n        \r\n        InitOptions();\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in unsubscribe) {\r\n                unsubscribe[u]();\r\n            }\r\n        });\r\n\r\n        ///////\r\n\r\n        pvm.clearAll = function () { toggleItems(false, true); };\r\n        pvm.selectAll = function () { toggleItems(true, false); }\r\n\r\n        function toggleItems(value, content) {\r\n            Object.keys(pvm.items).forEach(key => {\r\n\r\n                if (content || (key !== 'media' && key !== 'content')) {\r\n                    pvm.items[key].value = value;\r\n                }\r\n            });\r\n        }\r\n\r\n        ///////\r\n\r\n        function InitOptions() {\r\n\r\n            pvm.process.options = {\r\n                removeOrphans: pvm.flags.deleteMissing.value,\r\n                includeFileHash: pvm.flags.includeFiles.value\r\n            };\r\n\r\n            pvm.process.items = [{\r\n                id: item.id,\r\n                name: contentName,\r\n                udi: item.udi,\r\n                flags: uSyncPublishService.getFlags(pvm.flags)\r\n            }];\r\n\r\n            if ($scope.vm.options.simple) {\r\n                toggleSettings();\r\n                toggleContent();\r\n                toggleMedia();\r\n            }\r\n\r\n            // when the flags change.\r\n            unsubscribe.push($scope.$watch('pvm.items', function (newVal, oldVal) {\r\n\r\n                if (newVal !== undefined) {\r\n\r\n                    pvm.process.items = [];\r\n\r\n                    angular.forEach(newVal, function (value, key) {\r\n\r\n                        if (key === 'files') {\r\n                            pvm.process.options.includeFileHash = value.value;\r\n                        }\r\n                        else if (key == 'systemFiles') {\r\n                            pvm.process.options.includeSystemFileHash = value.value;\r\n                        }\r\n                        else if (value.value === true && value.typeName !== null) {\r\n                            pvm.process.items.push(\r\n                                {\r\n                                    udi: 'umb://' + value.typeName + '/' + value.root,\r\n                                    name: value.typeName,\r\n                                    flags: pvm.flagsValue\r\n                                });\r\n                        }\r\n                    });\r\n\r\n                    if (newVal.template.value === true && newVal.files.value !== true) {\r\n                        newVal.files.value = true;\r\n                    }\r\n                }\r\n            }, true));\r\n        }\r\n\r\n\r\n        ////// simple mode.\r\n\r\n        pvm.toggleSettings = toggleSettings;\r\n        pvm.toggleContent = toggleContent;\r\n        pvm.toggleMedia = toggleMedia;\r\n        pvm.toggleMode = toggleMode;\r\n\r\n        function toggleSettings() {\r\n            pvm.syncSettings = !pvm.syncSettings;\r\n            pvm.items.docTypes.value = pvm.syncSettings;\r\n            pvm.items.dataTypes.value = pvm.syncSettings;\r\n            pvm.items.mediaTypes.value = pvm.syncSettings;\r\n            pvm.items.memberTypes.value = pvm.syncSettings;\r\n            pvm.items.dictionary.value = pvm.syncSettings;\r\n            pvm.items.macro.value = pvm.syncSettings;\r\n            pvm.items.template.value = pvm.syncSettings;\r\n            pvm.items.files.value = pvm.syncSettings;\r\n            pvm.items.languages.value = pvm.syncSettings;\r\n\r\n            if (!pvm.syncSettings) {\r\n                if (pvm.syncMedia) toggleMedia();\r\n                if (pvm.syncContent) toggleContent();\r\n            }\r\n        }\r\n\r\n        function toggleMedia() {\r\n            pvm.syncMedia = !pvm.syncMedia;\r\n            pvm.items.media.value = pvm.syncMedia;\r\n\r\n            if (pvm.syncMedia && !pvm.syncSettings) {\r\n                toggleSettings();\r\n            }\r\n        }\r\n\r\n        function toggleContent() {\r\n            pvm.syncContent = !pvm.syncContent;\r\n\r\n            pvm.items.content.value = pvm.syncContent;\r\n            pvm.items.domains.value = pvm.syncContent;\r\n            pvm.items.protect.value = pvm.syncContent;\r\n\r\n            if (pvm.syncContent && !pvm.syncSettings) {\r\n                toggleSettings();\r\n            }\r\n        }\r\n\r\n        function toggleMode() {\r\n            $scope.vm.options.simple = !$scope.vm.options.simple;\r\n        }\r\n    };\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherConfigPullController', configPullController);\r\n\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function configPushController($scope,\r\n        uSyncPublishService) {\r\n\r\n        // events dear boy.\r\n        var unsubscribe = [];\r\n\r\n        // publisher vm\r\n        var pvm = this;\r\n\r\n        // config from the parent. \r\n        pvm.mode = $scope.vm.mode;\r\n        pvm.contentType = $scope.vm.contentType;\r\n\r\n        // options stored on the parent.\r\n        pvm.process = $scope.vm.process;\r\n\r\n        pvm.flags = {\r\n            includeChildren: { toggle: true, value: true },\r\n            includeDecendants: { toggle: true, value: true },\r\n            includeMedia: { toggle: false, value: false },\r\n            includeLinked: { toggle: false, value: false },\r\n            includeAncestors: { toggle: false, value: false },\r\n            includeDependencies: { toggle: false, value: false },\r\n            includeFiles: { toggle: false, value: true },\r\n            includeMediaFiles: { toggle: false, value: false },\r\n            deleteMissing: { toggle: false, value: false },\r\n            includeSystemFiles: { toggle: false, value: false }\r\n        };\r\n\r\n        pvm.flagsValue = uSyncPublishService.getFlags(pvm.flags);\r\n\r\n        var emptyGuid = '00000000-0000-0000-0000-000000000000';\r\n        var emptyString = '';\r\n\r\n        pvm.items = {\r\n            docTypes: { toggle: true, value: true, typeName: 'document-type', root: emptyGuid },\r\n            dataTypes: { toggle: true, value: true, typeName: 'data-type', root: emptyGuid },\r\n            mediaTypes: { toggle: true, value: true, typeName: 'media-type', root: emptyGuid },\r\n            domains: { toggle: true, value: true, typeName: 'domain', root: emptyGuid },\r\n            memberTypes: { toggle: true, value: true, typeName: 'member-type', root: emptyGuid },\r\n            dictionary: { toggle: true, value: true, typeName: 'dictionary-item', root: emptyGuid },\r\n            macro: { toggle: true, value: true, typeName: 'macro', root: emptyGuid },\r\n            template: { toggle: true, value: true, typeName: 'template', root: emptyGuid },\r\n            files: { toggle: true, value: true, typeName: null, root: emptyString },\r\n            systemFiles: { toggle: true, value: false, typeName: null, root: emptyString },\r\n            languages: { toggle: true, value: true, typeName: 'language', root: emptyString },\r\n            protect: { toggle: true, value: true, typeName: 'protect', root: emptyGuid },\r\n            content: { toggle: true, value: false, typeName: 'document', root: emptyGuid },\r\n            media: { toggle: true, value: false, typeName: 'media', root: emptyGuid },\r\n            relationTypes: { toggle: true, value: true, typeName: 'relation-type', root: emptyGuid }\r\n        };\r\n\r\n        // used in the UI, not the logic.\r\n        pvm.server = $scope.vm.selectedServer;\r\n\r\n        var item = $scope.vm.items[0];\r\n\r\n        var contentName = item.name;\r\n\r\n        if ($scope.vm.headings !== undefined) {\r\n            $scope.vm.headings.title = 'PUSH Settings';\r\n            $scope.vm.headings.description = \"PUSH settings to \" + pvm.server.name;\r\n            // $scope.model.description = pvm.server.Url\r\n        }\r\n\r\n        InitOptions();\r\n\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in unsubscribe) {\r\n                unsubscribe[u]();\r\n            }\r\n        })\r\n\r\n        ///////\r\n\r\n        pvm.clearAll = function () { toggleItems(false, true); };\r\n        pvm.selectAll = function () { toggleItems(true, false); }\r\n\r\n        function toggleItems(value, content) {\r\n            Object.keys(pvm.items).forEach(key => {\r\n\r\n                if (content || (key !== 'media' && key !== 'content')) {\r\n                    pvm.items[key].value = value;\r\n                }\r\n            });\r\n        }\r\n\r\n        ///////\r\n\r\n        function InitOptions() {\r\n\r\n            pvm.process.options = {\r\n                removeOrphans: pvm.flags.deleteMissing.value,\r\n                includeFileHash: pvm.flags.includeFiles.value\r\n            };\r\n\r\n            pvm.process.items = [{\r\n                id: item.id,\r\n                name: contentName,\r\n                udi: item.udi,\r\n                flags: uSyncPublishService.getFlags(pvm.flags)\r\n            }],\r\n\r\n\r\n\r\n            // when the flags change.\r\n            unsubscribe.push($scope.$watch('pvm.items', function (newVal, oldVal) {\r\n\r\n                if (newVal !== undefined) {\r\n\r\n                    pvm.process.items = [];\r\n\r\n                    angular.forEach(newVal, function (value, key) {\r\n\r\n                        if (key === 'files') {\r\n                            pvm.process.options.includeFileHash = value.value;\r\n                        }\r\n                        else if (key == 'systemFiles') {\r\n                            pvm.process.options.includeSystemFileHash = value.value;\r\n                        }\r\n                        else if (value.value === true && value.typeName !== null) {\r\n                            pvm.process.items.push(\r\n                                {\r\n                                    udi: 'umb://' + value.typeName + '/' + value.root,\r\n                                    name: value.typeName,\r\n                                    flags: pvm.flagsValue\r\n                                });\r\n                        }\r\n                    });\r\n\r\n                    // console.log(pvm.stepArgs.options);\r\n                    if (newVal.template.value === true && newVal.files.value !== true) {\r\n                        newVal.files.value = true;\r\n                    }\r\n                }\r\n            }, true));\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherConfigPushController', configPushController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function langController($scope, uSyncActionManager) {\r\n        var pvm = this;\r\n\r\n        pvm.loading = true;\r\n        pvm.all = true;\r\n\r\n        pvm.process = $scope.vm.process;\r\n        pvm.itemtype = 'content';\r\n\r\n        pvm.mode = $scope.vm.mode;\r\n\r\n        pvm.flags = $scope.vm.flags;\r\n        pvm.server = pvm.process.server;\r\n\r\n        if ($scope.model != null) {\r\n            $scope.model.title = 'Select languages';\r\n            $scope.model.subtitle = \"Select Languages to publish to \" + pvm.server.name;\r\n        }\r\n\r\n        pvm.variants = _.map($scope.vm.items[0].variants, function (name, id) {\r\n            return {\r\n                _checked: true,\r\n                name: name,\r\n                id: id\r\n            }\r\n        });\r\n\r\n        pvm.loading = false;\r\n\r\n\r\n        var watchEvent = $scope.$watch('pvm.variants', function (newValue) {\r\n            if (newValue !== undefined) {\r\n                pvm.process.options.cultures = [];\r\n                $scope.vm.valid = false;\r\n\r\n                for (let i = 0; i < newValue.length; i++) {\r\n                    if (newValue[i]._checked === true) {\r\n                        pvm.process.options.cultures.push(newValue[i].id);\r\n                        $scope.vm.valid = true;\r\n                    }\r\n                }\r\n\r\n                console.log(pvm.process.options.cultures.length, newValue.length);\r\n\r\n                if (pvm.process.options.cultures.length == newValue.length) {\r\n                    // all selected\r\n                    pvm.process.options.cultures = []\r\n                    pvm.all = true;\r\n                }\r\n                else {\r\n                    pvm.all = false;\r\n                }\r\n            }\r\n        }, true);\r\n\r\n        $scope.$on('$destroy', function () {\r\n            watchEvent();\r\n        })\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherLanguageController', langController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function optionsController($scope, dateHelper, userService,\r\n        uSyncPublishService, uSyncActionManager) {\r\n\r\n        // publisher vm\r\n        var pvm = this;\r\n\r\n        var evts = [];\r\n\r\n        pvm.process = $scope.vm.process;\r\n        pvm.headings = $scope.vm.headings;\r\n\r\n        pvm.mode = $scope.vm.mode;\r\n        pvm.contentType = $scope.vm.contentType;\r\n        pvm.flags = $scope.vm.flags;\r\n\r\n        pvm.action = pvm.process.action;\r\n\r\n        // used in the UI, not the logic.\r\n        pvm.server = $scope.vm.server;\r\n\r\n        pvm.showtoggle = pvm.server.sendSettings.hideAdvanced;\r\n        pvm.showAdvanced = !pvm.showtoggle;\r\n\r\n        if (pvm.headings !== null) {\r\n            pvm.headings.boxTitle = pvm.server.name + ': Settings';\r\n            pvm.headings.boxDescription = uSyncActionManager.getDescription(pvm.mode, pvm.contentType, pvm.server.name);\r\n        }\r\n\r\n        pvm.items = pvm.process.items;\r\n        pvm.firstItem = pvm.items[0];\r\n        pvm.contentName = pvm.firstItem.name;\r\n\r\n        pvm.showChildren = pvm.items.length > 1 || pvm.firstItem.hasChildren;\r\n\r\n        InitOptions();\r\n\r\n        $scope.$on(\"$destroy\", function () {\r\n            for (var e in evts) {\r\n                evts[e]();\r\n            }\r\n        });\r\n\r\n        ///////\r\n\r\n        function InitOptions() {\r\n          \r\n            var flags = uSyncPublishService.getFlags(pvm.flags);\r\n            if (pvm.mode.startsWith('file') === true) {\r\n                flags = 0;\r\n                pvm.process.options.includeContent = true;\r\n            }\r\n\r\n            _.map(pvm.items, function (item) {\r\n                item.flags = flags;\r\n            });\r\n\r\n            // we don't do delete missing when its a multi-select.\r\n            if (pvm.items.length > 1) {\r\n                pvm.flags.deleteMissing.value = false;\r\n            }\r\n\r\n            pvm.process.options.items = pvm.items;\r\n            pvm.process.options.removeOrphans = pvm.flags.deleteMissing.value;\r\n            pvm.process.options.includeFileHash = pvm.flags.includeFiles.value\r\n\r\n            // when the flags change.\r\n            evts.push($scope.$watch('pvm.flags', function (newVal, oldVal) {\r\n                if (newVal !== undefined) {\r\n                    updateItemFlags(pvm.flags);\r\n                    pvm.process.options.removeOrphans = pvm.flags.deleteMissing.value;\r\n                    pvm.process.options.includeFileHash = pvm.flags.includeFiles.value;\r\n\r\n                    /*\r\n                    if (pvm.mode.startsWith('file')) {\r\n                        pvm.process.options.includeFileHash = true;\r\n                    }*/\r\n\r\n                }\r\n            }, true));\r\n\r\n\r\n            pvm.showtoggle = shouldShowAdvanced();\r\n            pvm.showAdvanced = !pvm.showtoggle;\r\n        }\r\n\r\n        function updateItemFlags(flags) {\r\n            var flagValue = uSyncPublishService.getFlags(flags);\r\n            pvm.process.items.forEach(function (item) {\r\n                item.flags = flagValue;\r\n            });\r\n        }\r\n\r\n        function shouldShowAdvanced() {\r\n\r\n            if (!pvm.server.sendSettings.hideAdvanced) return false; // TODO: remove ?\r\n\r\n            if (pvm.action.actionOptions['canSchedule'] === true) return true;\r\n\r\n            for (var flag in pvm.flags) {\r\n                if (flag != 'includeChildren' && flag !== 'deleteMissing') {\r\n                    if (pvm.flags[flag].toggle == true) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n        $scope.$on('sync-server-selected', function (event, args) {\r\n            pvm.server = args.server;\r\n        });\r\n\r\n\r\n        //// schedules publishing stuff\r\n        // pvm.datePickerConfig = {};\r\n\r\n        pvm.process.options.attributes = {};\r\n        pvm.process.options.attributes.releaseDate = null;\r\n\r\n        pvm.currentUser = null;\r\n        pvm.releaseDateFormatted = null;\r\n\r\n        pvm.datePickerSetup = datePickerSetup;\r\n        pvm.datePickerChange = datePickerChange;\r\n        pvm.datePickerShow = datePickerShow;\r\n        pvm.datePickerClose = datePickerClose;\r\n        pvm.clearPublishDate = clearPublishDate;\r\n\r\n        pvm.flatPickr = null;\r\n\r\n        function datePickerSetup(instance) {\r\n            pvm.flatPickr = instance;\r\n        }\r\n\r\n        function datePickerChange(date) {\r\n            if (!date) { return; }\r\n            var serverTime = dateHelper.convertToServerStringTime(moment(date), Umbraco.Sys.ServerVariables.application.serverTimeOffset);\r\n            pvm.releaseDate = serverTime;\r\n            pvm.releaseDateFormatted = dateHelper.getLocalDate(pvm.releaseDate, pvm.currentUser.locale, \"MMM Do YYYY, HH:mm\");\r\n\r\n            pvm.process.options.attributes.releaseDate = serverTime;\r\n        }\r\n\r\n        function datePickerShow() {\r\n\r\n        }\r\n\r\n        function datePickerClose() {\r\n\r\n        }\r\n\r\n        function clearPublishDate() {\r\n\r\n            pvm.process.options.attributes[\"releaseDate\"] = null;\r\n\r\n            pvm.releaseDate = null;\r\n\r\n            // we don't have a publish date anymore so we can clear the min date for unpublish\r\n            var now = new Date();\r\n            var nowFormatted = moment(now).format(\"YYYY-MM-DD HH:mm\");\r\n            pvm.flatPickr.set(\"minDate\", nowFormatted);\r\n        }\r\n\r\n        // get current backoffice user and format dates\r\n        userService.getCurrentUser().then(function (currentUser) {\r\n\r\n            pvm.currentUser = currentUser;\r\n\r\n            var now = new Date();\r\n            var nowFormatted = moment(now).format(\"YYYY-MM-DD HH:mm\");\r\n\r\n            pvm.datePickerConfig = {\r\n                enableTime: true,\r\n                dateFormat: \"Y-m-d H:i\",\r\n                time_24hr: true,\r\n                minDate: nowFormatted,\r\n                defaultDate: nowFormatted\r\n            };       \r\n        });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherOptionsController', optionsController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function reportController($scope) {\r\n\r\n        // simple check to see if there are \r\n        // any changes that need to be made.\r\n\r\n        var pvm = this;\r\n\r\n        pvm.results = $scope.vm.report;\r\n        pvm.showDetails = true;\r\n        pvm.server = $scope.vm.server;\r\n\r\n        if ($scope.vm != null && $scope.vm.server != null) {\r\n            var server = $scope.vm.server;\r\n            $scope.vm.headings.boxTitle = server.name + ': Report';\r\n            $scope.vm.headings.boxDescription = server.description + ' [' + server.url + ']';\r\n        }\r\n\r\n        $scope.vm.complete = !hasPending(pvm.results);\r\n        $scope.vm.state.complete = $scope.vm.complete;\r\n        $scope.vm.postActions = hasPostActions(pvm.results);\r\n        // pvm.summary = getChangeSummary(pvm.results);\r\n\r\n        pvm.toggleDetails = toggleDetails;\r\n\r\n        function toggleDetails() {\r\n            pvm.showDetails = !pvm.showDetails\r\n        }\r\n\r\n        function hasPending(results) {\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].change !== 'NoChange') {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function hasPostActions(results) {\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].itemType.startsWith('Umbraco.Cms.Core.Models.IFile') && results[i].requiresPostProcessing) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getChangeSummary(results) {\r\n\r\n            var summary = {\r\n                total: results.length,\r\n                changes: 0,\r\n                update: 0,\r\n                create: 0,\r\n                delete: 0\r\n            };\r\n\r\n            for (let c = 0; c < results.length; c++) {\r\n                switch (results[c].change) {\r\n                    case 'NoChange':\r\n                        break;\r\n                    case 'Update':\r\n                        summary.update++;\r\n                        break;\r\n                    case 'Delete':\r\n                        summary.delete++;\r\n                        break;\r\n                    case 'Create':\r\n                        summary.create++;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            summary.changes = summary.update + summary.delete + summary.create;\r\n\r\n            return summary;\r\n        }\r\n         \r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherReportController', reportController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function resultController($scope) {\r\n\r\n        var pvm = this;\r\n\r\n        pvm.showDetails = true;\r\n        pvm.results = $scope.vm.report;\r\n        pvm.server = $scope.vm.server;\r\n\r\n        pvm.complete = isComplete(pvm.results);\r\n\r\n        // marks this as the last step in the process.\r\n        $scope.vm.state.complete = pvm.complete;\r\n\r\n        if ($scope.model != null && $scope.vm != null && $scope.vm.selectedServer != null) {\r\n            var server = $scope.vm.selectedServer;\r\n            $scope.model.title = server.name + ' Complete';\r\n            $scope.model.subtitle = server.description + ': [' + server.url + ']';\r\n        }\r\n\r\n        function isComplete(results) {\r\n            if (results != undefined && results !== null) {\r\n\r\n                for (let i = 0; i < results.length; i++) {\r\n                    if (results[i].Change === 'WillChange') {\r\n                        return false;\r\n                    }\r\n                };\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherResultController', resultController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function seedController($scope, uSyncPublishService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n\r\n        vm.seedUrl = Umbraco.Sys.ServerVariables.uSyncPublisher.seedUrl;\r\n        getServer(vm.seedUrl);\r\n\r\n        vm.process = $scope.$parent.vm.process;\r\n\r\n        vm.flags = {\r\n            includeChildren: { toggle: true, value: true },\r\n            includeDecendants: { toggle: true, value: true },\r\n            includeMedia: { toggle: false, value: false },\r\n            includeLinked: { toggle: false, value: false },\r\n            includeAncestors: { toggle: false, value: false },\r\n            includeDependencies: { toggle: false, value: false },\r\n            includeFiles: { toggle: false, value: true },\r\n            includeMediaFiles: { toggle: false, value: false },\r\n            deleteMissing: { toggle: false, value: false },\r\n            includeSystemFiles: { toggle: false, value: false }\r\n        };\r\n\r\n        vm.flagsValue = uSyncPublishService.getFlags(vm.flags);\r\n\r\n        vm.emptyGuid = '00000000-0000-0000-0000-000000000000';\r\n        vm.emptyString = '';\r\n\r\n        vm.groups = [\r\n            {\r\n                name: 'Settings',\r\n                icon: 'icon-settings',\r\n                selected: true,\r\n                items: [\r\n                    { name: 'document-type', root: vm.emptyGuid },\r\n                    { name: 'data-type', root: vm.emptyGuid },\r\n                    { name: 'media-type', root: vm.emptyGuid },\r\n                    { name: 'domain', root: vm.emptyGuid },\r\n                    { name: 'member-type', root: vm.emptyGuid },\r\n                    { name: 'dictionary-item', root: vm.emptyGuid },\r\n                    { name: 'macro', root: vm.emptyGuid },\r\n                    { name: 'template', root: vm.emptyGuid },\r\n                    { name: 'language', root: vm.emptyString },\r\n                ]\r\n            },\r\n            {\r\n                name: 'Content',\r\n                icon: 'icon-documents',\r\n                items: [\r\n                    { name: 'document', root: vm.emptyGuid },\r\n                    { name: 'protect', root: vm.emptyGuid }\r\n                ]\r\n            },\r\n            {\r\n                name: 'Media',\r\n                icon: 'icon-pictures-alt',\r\n                items: [\r\n                    { name: 'media', root: vm.emptyGuid }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        var evts = [];\r\n        evts.push($scope.$watch('vm.groups', function (newValue) {\r\n\r\n            vm.process.items = [];\r\n\r\n            _.each(newValue, function (group) {\r\n\r\n                if (group.selected) {\r\n                    _.each(group.items, function (item) {\r\n                        vm.process.items.push({\r\n                            udi: 'umb://' + item.name + '/' + item.root,\r\n                            name: item.name,\r\n                            flags: vm.flagsValue\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (vm.process.items.length == 0) {\r\n                $scope.$parent.vm.state.valid = false;\r\n            }\r\n            else {\r\n                $scope.$parent.vm.state.valid = true;\r\n            }\r\n        }, true));\r\n\r\n        ////\r\n        function getServer(url) {\r\n\r\n            uSyncPublishService.getServerByUrl(url)\r\n                .then(function (result) {\r\n                    vm.server = result.data;\r\n                    setTitle(vm.server);\r\n                    vm.loading = false; \r\n                });\r\n\r\n        }\r\n\r\n        function setTitle(server) {\r\n            var parent = $scope.$parent;\r\n            if (parent != null && parent.vm != null && parent.vm.headings != null) {\r\n                parent.vm.headings.title = 'Seed from ' + server.name;\r\n                parent.vm.headings.description = 'Selec the items you want to pull from the ' + server.name + ' instance';\r\n            }\r\n        }\r\n\r\n        //// \r\n        function toggleFiles() {\r\n\r\n        }\r\n\r\n\r\n        // cleanup\r\n        $scope.$on('$destroy', function () {\r\n            for (var u in evts) {\r\n                evts[u]();\r\n            }\r\n        });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncPublisherSeedController', seedController);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function realtimeServerConfig($scope, $http) {\r\n\r\n        // config view model \r\n        var cvm = this;\r\n        cvm.showAll = true;\r\n\r\n    };\r\n\r\n    angular.module('umbraco')\r\n        .controller('realtimeServerConfigController', realtimeServerConfig);\r\n\r\n})();"]}