{"version":3,"sources":["../../uSyncSnapshots/components/createSnapshotComponent.js","../../uSyncSnapshots/components/listSnapshotsComponent.js","../../uSyncSnapshots/dashboard/settingsController.js","../../uSyncSnapshots/dialog/importController.js","../../uSyncSnapshots/services/snapshotService.js","../../uSyncSnapshots/backoffice/uSyncSnapshots/snapshotDashboardController.js"],"names":["createSnapshotComponent","templateUrl","Umbraco","Sys","ServerVariables","application","applicationPath","controllerAs","controller","$rootScope","$q","$scope","uSync8DashboardService","uSyncSnapshotService","eventsService","notificationsService","uSyncHub","vm","this","init","working","reported","result","create","createSnapshot","snapshot","name","includeFolders","group","isFull","createButton","state","defer","promises","initHub","hub","on","data","status","update","start","resolve","promise","all","then","console","log","undefined","$","connection","connectionId","fileCount","$broadcast","success","error","exceptionMessage","defaultButton","labelKey","handler","subButtons","$onInit","getHandlerGroups","_","forEach","key","startsWith","push","toLowerCase","evts","event","$on","e","unsubscribe","angular","module","component","listSnapshotsComponent","uSyncExpansionService","editorService","loading","snapshots","importDisabled","uSyncSnapshots","getSnapshots","remove","alias","ExceptionMessage","apply","action","getClientId","results","download","buttonState","downloadAll","importDialog","open","title","view","size","submit","done","close","applyAll","report","reportAll","licenced","isLicenced","settings","folders","saveSettings","getSettings","example","uSync","Snapshots","Enabled","enabled","DisableImport","disableImport","HandlerSet","handlerSet","Folders","Exlude","exclude","Upload","upload","file","url","snapshotService","fields","headers","config","model","evt","handleFiles","files","length","factory","$http","umbRequestHelper","serviceRoot","get","groupName","fullSnapshot","clientId","put","post","Alias","delete","downloadFile","$timeout","navigationService","selectNavigationItem","item","emit","page","description","navigation","icon","umbracoSettings","appPluginsPath","active","syncTree","tree","path"],"mappings":"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","file":"usyncsnapshots.9.4.0.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    var createSnapshotComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncSnapshots/components/createComponent.html',\r\n        controllerAs: 'vm',\r\n        controller: createSnapshotController\r\n    };\r\n\r\n    function createSnapshotController($rootScope, $q, $scope,\r\n        uSync8DashboardService,\r\n        uSyncSnapshotService,\r\n        eventsService,\r\n        notificationsService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.createButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_create-snapshot',\r\n                handler: function () {\r\n                    createSnapshot('');\r\n                }\r\n            },\r\n            subButtons: []\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            getHandlerGroups();\r\n            init();\r\n        }\r\n\r\n        /// \r\n        function init() {\r\n            vm.working = false;\r\n            vm.reported = false;\r\n            vm.result = '';\r\n\r\n            vm.create = createSnapshot;\r\n            vm.snapshot = {\r\n                name: '',\r\n                includeFolders: true\r\n            };\r\n        }\r\n\r\n        ///\r\n        function createSnapshot(group, isFull) {\r\n            vm.createButton.state = 'busy';\r\n            vm.working = true;\r\n            vm.reported = false;\r\n            vm.result = \"\";\r\n\r\n            var promises = [initHub()];\r\n\r\n            $q.all(promises).then(function () {\r\n\r\n                console.log('starting');\r\n\r\n                uSyncSnapshotService.createSnapshot(vm.snapshot.name, vm.snapshot.includeFolders, group, isFull, getClientId())\r\n                    .then(function (result) {\r\n                        vm.createButton.state = 'success';\r\n                        vm.reported = true;\r\n\r\n                        if (result.data.fileCount === 0) {\r\n                            vm.result = 'Empty Snapshot, no changes detected';\r\n                        }\r\n                        else {\r\n                            vm.result = 'Snapshot created ' + result.data.fileCount + ' changes captured';\r\n                        }\r\n\r\n                        $rootScope.$broadcast('usync-snapshot-reloaded');\r\n                        notificationsService.success('complete', 'snapshot created');\r\n                    }, function (error) {\r\n                        vm.working = false;\r\n                        vm.createButton.state = 'error';\r\n                        notificationsService.error('failed', error.data.exceptionMessage);\r\n                    });\r\n\r\n            });\r\n\r\n        }\r\n\r\n        function getHandlerGroups() {\r\n            uSync8DashboardService.getHandlerGroups()\r\n                .then(function (result) {\r\n                    _.forEach(result.data, function (group, key) {\r\n\r\n                        if (!key.startsWith('_')) {\r\n                            vm.createButton.subButtons.push({\r\n                                handler: function () {\r\n                                    createSnapshot(group, false);\r\n                                },\r\n                                labelKey: 'usync_create-' + key.toLowerCase()\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    vm.createButton.subButtons.push({\r\n                        handler: function () {\r\n                            createSnapshot('', true);\r\n                        },\r\n                        labelKey: 'usync_create-full'\r\n                    });\r\n                });\r\n        }\r\n\r\n        function initHub() {\r\n\r\n            var defer = $q.defer();\r\n\r\n            uSyncHub.initHub(function (hub) {\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start(function (result) {\r\n                    defer.resolve('complete ' + result);\r\n                });\r\n\r\n\r\n            });\r\n\r\n            return defer.promise;\r\n\r\n        }\r\n\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        /// reset when the tab changes (and its been completed)\r\n        var evts = [];\r\n\r\n        evts.push(eventsService.on('usync-snapshot.tab.change', function (event) {\r\n            if (vm.reported) {\r\n                init();\r\n            }\r\n        }));\r\n\r\n        //ensure to unregister from all events!\r\n        $scope.$on('$destroy', function () {\r\n            for (var e in evts) {\r\n                eventsService.unsubscribe(evts[e]);\r\n            }\r\n        });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncSnapshotCreate', createSnapshotComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var listSnapshotsComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncSnapshots/components/listSnapshotsComponent.html',\r\n        controllerAs: 'vm',\r\n        controller: listSnapshotsController\r\n    };\r\n\r\n    function listSnapshotsController(\r\n        $scope, $rootScope, $q,\r\n        uSyncSnapshotService, uSyncHub,\r\n        uSyncExpansionService,\r\n        notificationsService, editorService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        vm.snapshots = [];\r\n\r\n        vm.importDisabled = Umbraco.Sys.ServerVariables.uSyncSnapshots.importDisabled;\r\n\r\n        vm.getSnapshots = getSnapshots;\r\n\r\n        vm.remove = remove;\r\n        vm.apply = apply;\r\n        vm.download = download;\r\n        vm.downloadAll = downloadAll;\r\n        vm.importDialog = importDialog;\r\n\r\n        vm.applyAll = applyAll;\r\n\r\n        vm.report = report;\r\n        vm.reportAll = reportAll;\r\n\r\n        vm.working = false;\r\n        vm.action = 'report';\r\n        vm.results = [];\r\n        vm.reported = false;\r\n        vm.licenced = true;\r\n\r\n        var promises = [];\r\n        promises.push(initHub());\r\n                \r\n        $q.all(promises).then(function () {\r\n            getSnapshots();\r\n        });\r\n\r\n        $scope.$on('usync-snapshot-reloaded', function () {\r\n            vm.getSnapshots();\r\n        });\r\n\r\n        vm.$onInit = function () {\r\n            uSyncExpansionService.isLicenced('snapshots', '8.0.0')\r\n                .then(function (result) {\r\n                    vm.licenced = result.data;\r\n                });\r\n        };\r\n\r\n        ///////////\r\n        function getSnapshots() {\r\n            uSyncSnapshotService.getSnapshots()\r\n                .then(function (result) {\r\n                    vm.snapshots = result.data;\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function apply(alias) {\r\n            vm.working = true;\r\n            vm.reported = false;\r\n            vm.action = 'Import';\r\n            uSyncSnapshotService.apply(alias, getClientId())\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.results = result.data;\r\n                    $rootScope.$broadcast('usync-snapshot-reloaded');\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    notificationsService.error(\"Error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function applyAll() {\r\n            vm.working = true;\r\n            vm.reported = false;\r\n            vm.action = 'Import';\r\n            uSyncSnapshotService.applyAll(getClientId())\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.results = result.data;\r\n                    $rootScope.$broadcast('usync-snapshot-reloaded');\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    notificationsService.error(\"Error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function report(alias) {\r\n            vm.working = true;\r\n            vm.reported = false;\r\n            vm.action = 'Report';\r\n            uSyncSnapshotService.report(alias, getClientId())\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.results = result.data;\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    notificationsService.error(\"error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function reportAll() {\r\n            vm.working = true;\r\n            vm.reported = false;\r\n            vm.action = 'Report';\r\n            uSyncSnapshotService.reportAll(getClientId())\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.results = result.data;\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    notificationsService.error(\"error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n\r\n        function remove(alias) {\r\n\r\n            vm.loading = true;\r\n\r\n            uSyncSnapshotService.remove(alias)\r\n                .then(function (result) {\r\n                    getSnapshots();\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    notificationsService.error(\"error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function download(alias) {\r\n            uSyncSnapshotService.download(alias)\r\n                .then(function (result) {\r\n                    vm.buttonState = 'success';\r\n                }, function (error) {\r\n                    vm.buttonState = 'error';\r\n                    notificationsService.error(\"error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function downloadAll() {\r\n            uSyncSnapshotService.downloadAll()\r\n                .then(function (result) {\r\n                    vm.buttonState = 'success';\r\n                }, function (error) {\r\n                    vm.buttonState = 'error';\r\n                    notificationsService.error(\"error\", error.data.ExceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importDialog() {\r\n\r\n            editorService.open({\r\n\r\n                title: 'Import Snapshot File',\r\n                view: '/App_Plugins/uSyncSnapshots/dialog/importDialog.html',\r\n                size: 'small',\r\n                submit: function (done) {\r\n                    editorService.close();\r\n                    $rootScope.$broadcast('usync-snapshot-reloaded');\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            });\r\n        }\r\n\r\n        function initHub() {\r\n\r\n            var defer = $q.defer();\r\n\r\n            uSyncHub.initHub(function (hub) {\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start(function (result) {\r\n                    defer.resolve('complete ' + result);\r\n                });\r\n\r\n\r\n            });\r\n\r\n            return defer.promise;\r\n\r\n        }\r\n\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncSnapshotsList', listSnapshotsComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope, uSyncSnapshotService, notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n\r\n        vm.settings = {\r\n            folders: 'scripts,views,css'\r\n        };\r\n\r\n        vm.buttonState = 'init';\r\n\r\n        vm.saveSettings = saveSettings;\r\n\r\n        getSettings();\r\n\r\n        function saveSettings() {\r\n            vm.buttonState = 'busy';\r\n\r\n            uSyncSnapshotService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    notificationsService.success('Saved', 'Settings Saved');\r\n                    vm.buttonState = 'success';\r\n                }, function (error) {\r\n                        notificationsService.error(\"Error\", error.data.ExceptionMessage);\r\n                        vm.buttonState = 'error';\r\n                });\r\n        }\r\n\r\n        vm.example = {};\r\n\r\n        function getSettings() {\r\n            uSyncSnapshotService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false; \r\n                    makeExampleSettings(vm.settings);\r\n                })\r\n        }\r\n\r\n        function makeExampleSettings(settings) {\r\n\r\n            vm.example = {\r\n                uSync: {\r\n                    Snapshots: {\r\n                        Enabled: settings.enabled,\r\n                        DisableImport: settings.disableImport,\r\n                        HandlerSet: settings.handlerSet ?? \"default\",\r\n                        Folders: settings.folders,\r\n                        Exlude: settings.exclude\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSnapshotSettingsController', settingsController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function importController($scope, Upload) {\r\n\r\n        var vm = this;\r\n\r\n        vm.upload = upload;\r\n        vm.handleFiles = handleFiles;\r\n        vm.close = close; \r\n\r\n        function upload(file) {\r\n            vm.buttonState = 'busy';\r\n            Upload.upload({\r\n                url: Umbraco.Sys.ServerVariables.uSyncSnapshots.snapshotService + 'uploadFile',\r\n                fields: {},\r\n                file: file\r\n            }).success(function (data, status, headers, config) {\r\n                vm.buttonState = 'success';\r\n                submit();\r\n            }).error(function (evt, status, headers, config) {\r\n                vm.buttonState = 'error';\r\n            });\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        function handleFiles(files, event) {\r\n            if (files && files.length > 0) {\r\n                vm.file = files[0];\r\n                // vm.upload(files[0]);\r\n            }\r\n        }\r\n\r\n        /////////////////\r\n\r\n        function submit() {\r\n            if ($scope.model.submit) {\r\n                $scope.model.submit();\r\n            }\r\n        }\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSnapshotImportController', importController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function snapshotService($http, umbRequestHelper) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSyncSnapshots.snapshotService;\r\n\r\n        return {\r\n            enabled: enabled,\r\n\r\n            getSnapshots: getSnapshots,\r\n            createSnapshot: createSnapshot,\r\n\r\n            report: report,\r\n            reportAll: reportAll,\r\n\r\n            apply: apply,\r\n            applyAll: applyAll,\r\n\r\n            remove: remove,\r\n            download: download,\r\n            downloadAll: downloadAll,\r\n\r\n            getSettings: getSettings,\r\n            saveSettings: saveSettings\r\n        };\r\n\r\n        /////////////\r\n\r\n        function enabled() {\r\n            return $http.get(serviceRoot + 'Enabled');\r\n        }\r\n\r\n        function createSnapshot(name, includeFolders, groupName, fullSnapshot, clientId) {\r\n            return $http.put(serviceRoot + 'CreateSnapshot', {\r\n                name: name, \r\n                includeFolders: includeFolders,\r\n                group: groupName,\r\n                clientId: clientId,\r\n                fullSnapshot: fullSnapshot\r\n            });\r\n        }\r\n\r\n        function getSnapshots() {\r\n            return $http.get(serviceRoot + 'GetSnapshots');\r\n        }\r\n\r\n        function remove(alias) {\r\n            return $http.delete(serviceRoot + 'Remove/?alias=' + alias);\r\n        }\r\n\r\n        function download(alias) {\r\n            var url = serviceRoot + 'ZipSnapshot/?alias=' + alias;\r\n            return umbRequestHelper.downloadFile(url);\r\n        }\r\n\r\n        function downloadAll() {\r\n            var url = serviceRoot + 'ZipAll';\r\n            return umbRequestHelper.downloadFile(url);\r\n        }\r\n\r\n        ///\r\n        function report(alias, clientId) {\r\n            return $http.get(serviceRoot + 'Report/?alias=' + alias + '&clientId=' + clientId);\r\n        }\r\n\r\n        function reportAll(clientId) {\r\n            return $http.get(serviceRoot + 'ReportAll/?clientId=' + clientId);\r\n        }\r\n\r\n        function apply(alias, clientId) {\r\n            return $http.post(serviceRoot + 'Apply/', { Alias: alias, clientId: clientId });\r\n        }\r\n\r\n        function applyAll(clientId) {\r\n            return $http.post(serviceRoot + 'ApplyAll/', { clientId: clientId });\r\n        }\r\n\r\n        ////\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'SaveSettings', settings);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncSnapshotService', snapshotService);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function snapshotDashboardController($scope, $timeout, eventsService, navigationService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-snapshot.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync Snapshots',\r\n            description: 'point in time views of umbraco setup',\r\n            navigation: [\r\n                {\r\n                    'name': 'snapshots',\r\n                    'alias': 'snapshots',\r\n                    'icon': 'icon-flash',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSyncSnapshots/dashboard/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Create',\r\n                    'alias': 'snapCreate',\r\n                    'icon': 'icon-add',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSyncSnapshots/dashboard/create.html'\r\n                },\r\n                {\r\n                    'name': 'settings',\r\n                    'alias': 'snapsettings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSyncSnapshots/dashboard/settings.html'\r\n                }\r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: 'uSyncSnapshots', path: '-1' });\r\n        });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSnapshotDashboardController', snapshotDashboardController);\r\n\r\n})();"]}