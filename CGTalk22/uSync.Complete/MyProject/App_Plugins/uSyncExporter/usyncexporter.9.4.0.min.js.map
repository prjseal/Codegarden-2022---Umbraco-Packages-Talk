{"version":3,"sources":["../../uSyncExporter/dashboard.controller.js","../../uSyncExporter/export.controller.js","../../uSyncExporter/exporter.manager.js","../../uSyncExporter/exporter.service.js","../../uSyncExporter/exportoverlay.controller.js","../../uSyncExporter/import.controller.js","../../uSyncExporter/components/itemoptions.component.js"],"names":["angular","module","controller","$scope","$q","editorService","overlayService","uSyncExportManager","uSyncExporterService","vm","this","prepItem","item","entityType","flags","includeChildren","includeAncestors","includeDependencies","undefined","udi","id","replaceAll","nodeType","includeFiles","includeContent","hasChildren","findItem","selection","length","let","n","licenced","loading","showHelp","title","view","help","subtitle","Umbraco","Sys","ServerVariables","uSync","exporterPluginPath","show","hideSubmitButton","submit","model","close","pickTypes","exporter","options","section","type","treeAlias","multiPicker","size","idType","concat","prepSelection","_","uniq","s","name","select","node","selected","index","splice","push","blockContainers","filter","i","metaData","isContainer","filterCssClass","treePicker","createExport","overlay","includeMedia","includeLinked","includeConfig","disableBackdropClick","disableEscKey","submitButtonLabel","closeButtonLabel","create","open","remove","openImportDialog","entity","disableImport","exporterDisableImport","promises","isLicenced","then","result","data","getSettings","version","getExporters","exporters","all","init","navigationService","exportItem","closeButtonLable","hasError","currentNode","exportContainer","itemType","console","log","isDocType","isMedia","hideDialog","factory","cb","done","$http","umbRequestHelper","uSyncDependencyManager","serviceRoot","exporterService","get","getSyncItems","items","post","request","getExport","httpPath","payload","responseType","response","success","headers","filename","disposition","indexOf","matches","exec","replace","getFileName","contentType","blob","Blob","navigator","msSaveBlob","saveBlob","webkitSaveBlob","mozSaveBlob","ex","urlCreator","window","URL","webkitURL","mozURL","msURL","link","document","createElement","url","createObjectURL","setAttribute","event","createEvent","initMouseEvent","dispatchEvent","location","resolve","reject","errorMsg","status","downloadPost","reportPack","importPack","uSyncHub","update","Message","Count","Total","exporting","complete","getClientId","$","connection","connectionId","valid","exported","disableSubmitButton","submitButtonState","processExport","clientId","progress","exportComplete","stepIndex","pageNumber","nextPage","moment","format","removeOrphans","includeFileHash","includeSystemFiles","includeMediaFiles","includeViews","includeDictionary","prepItems","error","getItems","calcPercentage","count","total","initHub","hub","on","blocks","message","split","start","notificationsService","Upload","state","updateActions","handlerFolder","nextFolder","errorMessage","handleError","running","steps","currentStepIndex","buttonState","showError","getError","key","Object","keys","find","k","toLowerCase","actions","report","initOptions","importId","importGroup","defaultButton","labelKey","handler","subButtons","handleFiles","files","file","upload","uploaded","fields","config","evt","processImport","countChanges","changes","forEach","val","Change","imported","getTypeName","typeName","umbType","substring","lastIndexOf","syncOptionsComponent","templateUrl","application","applicationPath","controllerAs","bindings","hideDecendants","hideFiles","component"],"mappings":"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","file":"usyncexporter.9.4.0.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function exporterDashboardController($scope, $q,\r\n        editorService, overlayService,\r\n        uSyncExportManager, uSyncExporterService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.licenced = false;\r\n        vm.loading = true;\r\n        vm.selection = [];\r\n\r\n        vm.showHelp = showHelp;\r\n        vm.pickTypes = pickTypes;\r\n        vm.createExport = createExport;\r\n        vm.remove = remove;\r\n\r\n        vm.openImportDialog = openImportDialog;\r\n        vm.disableImport = Umbraco.Sys.ServerVariables.uSync.exporterDisableImport;\r\n\r\n        init();\r\n\r\n        function init() {\r\n\r\n            vm.loading = true;\r\n            var promises = [];\r\n\r\n            promises.push(uSyncExporterService.isLicenced()\r\n                .then(function (result) {\r\n                    vm.licenced = result.data\r\n                }));\r\n\r\n\r\n            promises.push(uSyncExporterService.getSettings()\r\n                .then(function (result) {\r\n                    vm.version = result.data.version;\r\n                    vm.includeFiles = result.data.includeFiles;\r\n                    vm.includeMedia = result.data.includeMedia;\r\n                    vm.includeLinked = result.data.includeLinked;\r\n                }));\r\n\r\n            promises.push(uSyncExporterService.getExporters()\r\n                .then(function (result) {\r\n                    vm.exporters = result.data;\r\n                }));\r\n\r\n            $q.all(promises).then(function () {\r\n                vm.loading = false;\r\n            })\r\n           \r\n        }\r\n\r\n        function openImportDialog() {\r\n            uSyncExportManager.openImportDialog({\r\n                entity: { id: -1, name: 'uSync Pack' }\r\n            }, null);\r\n        }\r\n\r\n\r\n        function createExport() {\r\n\r\n            var overlay = {\r\n                options: {\r\n                    selection: vm.selection,\r\n                    includeFiles: vm.includeFiles,\r\n                    includeMedia: vm.includeMedia,\r\n                    includeLinked: vm.includeLinked,\r\n                    includeConfig: vm.includeConfig,\r\n                },\r\n                view: Umbraco.Sys.ServerVariables.uSync.exporterPluginPath + '/exportoverlay.html',\r\n                title: 'Create sync pack',\r\n                subtitle: 'Create a sync pack of the items you want to export',\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                submitButtonLabel: 'Create',\r\n                closeButtonLabel: 'Close',\r\n                submit: function (model) {\r\n                    if (model.create !== null && model.create !== undefined) {\r\n                        model.create()\r\n                    }\r\n                }, \r\n                close: function (close) {\r\n                    overlayService.close();\r\n                }\r\n            }\r\n\r\n            overlayService.open(overlay);\r\n\r\n        }\r\n\r\n\r\n        ///// Pickers\r\n        function pickTypes(exporter) {\r\n\r\n            var options = {\r\n                section: exporter.section,\r\n                title: 'Add ' + exporter.type,\r\n                treeAlias: exporter.type,\r\n                multiPicker: true,\r\n                size: 'small',\r\n                view: exporter.view,\r\n                idType: 'int',\r\n                submit: function (model) {\r\n                    vm.selection = vm.selection.concat(prepSelection(model.selection, exporter.entityType));\r\n                    cleanSelection();\r\n                    editorService.close();\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                },\r\n                select: function (node) {\r\n                    node.selected = node.selected === true ? false : true;\r\n                    multiSelectItem(node, this.selection, exporter.entityType);\r\n                },\r\n                selection: vm.selection\r\n            };\r\n\r\n            if (exporter.blockContainers) {\r\n                // don't let the user pick the containers.\r\n                options.filter = function (i) {\r\n                    return i.metaData.isContainer;\r\n                };\r\n                options.filterCssClass = 'not-allowed';\r\n            }\r\n\r\n            editorService.treePicker(options);\r\n        }\r\n\r\n        function cleanSelection() {\r\n            vm.selection = _.uniq(vm.selection, false, function (s) {\r\n                return s.id + s.name;\r\n            });\r\n        }\r\n\r\n        function prepSelection(selection, entityType) {\r\n\r\n            if (selection.length > 0) {\r\n\r\n                for (let n = 0; selection.length > n; n++) {\r\n                    prepItem(selection[n], entityType);\r\n                }\r\n            }\r\n\r\n            return selection;\r\n        }\r\n\r\n        function prepItem(item, entityType) {\r\n\r\n            item.flags = {\r\n                includeChildren: false,\r\n                includeAncestors: true,\r\n                includeDependencies: true\r\n            };\r\n\r\n            item.entityType = entityType;\r\n\r\n            if (entityType !== undefined && item.udi == null) {\r\n                item.id = cleanId(item.id);\r\n            }\r\n\r\n            switch (item.nodeType) {\r\n                case 'media':\r\n                case 'content':\r\n                case 'container':\r\n                    item.flags.includeChildren = true;\r\n                    break;\r\n                case 'templates':\r\n                    item.flags.includeFiles = true;\r\n                    break;\r\n                case 'dictionary':\r\n                    item.flags.includeAncestors = false;\r\n                    item.flags.includeDependencies = false;\r\n                    break;\r\n                case 'templates':\r\n                    item.flags.includeContent = true;\r\n                    break;\r\n                default:\r\n                    if (item.hasChildren === true) {\r\n                        item.flags.includeChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function cleanId(id) {\r\n            return id.replaceAll('+', '%20').replaceAll('%2F', '/');\r\n        }\r\n\r\n        function findItem(id, selection) {\r\n\r\n            if (selection.length > 0) {\r\n                for (let n = 0; selection.length > n; n++) {\r\n                    if (selection[n].id === id) {\r\n                        return n;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return -1;\r\n\r\n        }\r\n\r\n        function multiSelectItem(item, selection, entityType) {\r\n\r\n            var index = findItem(item.id, selection);\r\n\r\n            if (index != -1) {\r\n                selection.splice(index, 1);\r\n            }\r\n            else {\r\n                prepItem(item, entityType);\r\n                selection.push(item);\r\n            }\r\n        }\r\n\r\n        function remove(id) {\r\n\r\n            var index = findItem(id, vm.selection);\r\n            if (index != -1) {\r\n                vm.selection.splice(index, 1);\r\n            }\r\n        }\r\n\r\n\r\n        ///// UI - Help\r\n        function showHelp(title, view) {\r\n\r\n            vm.help = {\r\n                title: title,\r\n                subtitle: 'uSync exporter help',\r\n                view: Umbraco.Sys.ServerVariables.uSync.exporterPluginPath + '/help/' + view + '.html',\r\n                show: true,\r\n                hideSubmitButton: true,\r\n                submit: function (model) {\r\n                    vm.help.show = false;\r\n                    vm.help = {}\r\n                },\r\n                close: function (model) {\r\n                    vm.help.show = false;\r\n                    vm.help = {}\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExporterDashboardController', exporterDashboardController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function exportController($scope,\r\n        navigationService, overlayService,\r\n        uSyncExporterService) {\r\n\r\n        var vm = this;\r\n        vm.hasError = false;\r\n\r\n        vm.node = $scope.currentNode;\r\n\r\n        vm.exportItem = exportItem;\r\n        vm.exportContainer = exportContainer;\r\n\r\n        vm.hasChildren = $scope.currentNode.hasChildren;\r\n        vm.isDocType = $scope.currentNode.nodeType === 'documentTypes';\r\n        vm.isMedia = $scope.currentNode.nodeType === 'media';\r\n\r\n        vm.options = {\r\n            includeChildren: false,\r\n            includeAncestors: true,\r\n            includeDependencies: true,\r\n            includeFiles: false,\r\n            includeMedia: false,\r\n        };\r\n\r\n        vm.close = close;\r\n\r\n        function exportItem() {\r\n\r\n            prepItem(vm.node);\r\n\r\n            vm.options.selection = [vm.node]\r\n\r\n            var overlay = {\r\n                options: vm.options,\r\n                view: Umbraco.Sys.ServerVariables.uSync.exporterPluginPath + '/exportoverlay.html',\r\n                title: 'Create a sync pack',\r\n                subtitle: 'Create a sync pack of the items you want to export',\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                submitButtonLabel: 'Create',\r\n                closeButtonLable: 'close',\r\n                submit: function (model) {\r\n                    if (model.create !== null && model.create !== undefined) {\r\n                        model.create()\r\n                    }\r\n                },\r\n                close: function (close) {\r\n                    overlayService.close();\r\n                }\r\n            };\r\n\r\n            overlayService.open(overlay);\r\n        }\r\n\r\n        function exportContainer(itemType) {\r\n\r\n            console.log(vm.node);\r\n            exportItem();\r\n        }\r\n\r\n        function prepItem(item) {\r\n\r\n            item.flags = {\r\n                includeChildren: false,\r\n                includeAncestors: true,\r\n                includeDependencies: true\r\n            };\r\n\r\n            switch (item.nodeType) {\r\n                case 'media':\r\n                case 'content':\r\n                case 'container':\r\n                    item.flags.includeChildren = true;\r\n                    break;\r\n                case 'templates':\r\n                    item.flags.includeFiles = true;\r\n                    break;\r\n                case 'macros':\r\n                    item.udi = 'umb://macro/00000000-0000-0000-0000-000000000000';\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n        function close() {\r\n            if ($scope.model && $scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n            else {\r\n                navigationService.hideDialog();\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('usyncExporterExportController', exportController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function exportManager(editorService, navigationService) {\r\n\r\n        return {\r\n            openImportDialog: openImportDialog\r\n        };\r\n\r\n\r\n        function openImportDialog(options, cb) {\r\n            navigationService.hideDialog();\r\n\r\n            editorService.open({\r\n                entity: {\r\n                    id: options.entity.id * 1,\r\n                    name: options.entity.name\r\n                },\r\n                title: 'Import uSync Pack',\r\n                view: Umbraco.Sys.ServerVariables.uSync.exporterPluginPath + '/import.html',\r\n                // size: 'small',\r\n                submit: function (done) {\r\n                    editorService.close();\r\n                    if (cb !== undefined && cb !== null) {\r\n                        cb(true);\r\n                    }\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                    if (cb !== undefined && cb !== null) {\r\n                        cb(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncExportManager', exportManager);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncExporterService($http, $q,\r\n        umbRequestHelper, uSyncDependencyManager) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.exporterService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getExporters: getExporters,\r\n            isLicenced: isLicenced,\r\n\r\n            getSyncItems: getSyncItems,\r\n\r\n            createExport: createExport,\r\n            getExport: getExport,\r\n\r\n            reportPack: reportPack,\r\n            importPack: importPack,\r\n            \r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        ////\r\n        function isLicenced() {\r\n            return $http.get(serviceRoot + \"IsLicenced\");\r\n        }\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + \"GetSettings\");\r\n        }\r\n\r\n        function getExporters() {\r\n            return $http.get(serviceRoot + \"GetExporters\");\r\n        }\r\n\r\n        function getSyncItems(items) {\r\n            \r\n            return $http.post(serviceRoot + \"GetSyncItems\", items);\r\n        }\r\n\r\n        function createExport(request) {\r\n            return $http.post(serviceRoot + \"CreateExport\", request);\r\n        }\r\n\r\n        function getExport(request) {\r\n            return downloadPost(serviceRoot + \"GetExport\", request);\r\n        }\r\n\r\n\r\n        function reportPack(request) {\r\n            return $http.post(serviceRoot + \"ReportPack\", request);\r\n        }\r\n\r\n        function importPack(request) {\r\n            return $http.post(serviceRoot + \"ImportPack\", request);\r\n        }\r\n\r\n\r\n        /*\r\n         * Downloads a file to the client using AJAX/XHR\r\n         * Based on an implementation here: web.student.tuwien.ac.at/~e0427417/jsdownload.html\r\n         * See https://stackoverflow.com/a/24129082/694494\r\n         */\r\n        function downloadPost(httpPath, payload) {\r\n\r\n            // Use an arraybuffer\r\n            return $http.post(httpPath, payload, { responseType: 'arraybuffer' })\r\n                .then(function (response) {\r\n\r\n                    var octetStreamMime = 'application/octet-stream';\r\n                    var success = false;\r\n\r\n                    // Get the headers\r\n                    var headers = response.headers();\r\n\r\n                    // Get the filename from the header or default to \"download.bin\"\r\n                    var filename = getFileName(headers);\r\n\r\n                    // Determine the content type from the header or default to \"application/octet-stream\"\r\n                    var contentType = headers['content-type'] || octetStreamMime;\r\n\r\n                    try {\r\n                        // Try using msSaveBlob if supported\r\n                        let blob = new Blob([response.data], { type: contentType });\r\n                        if (navigator.msSaveBlob)\r\n                            navigator.msSaveBlob(blob, filename);\r\n                        else {\r\n                            // Try using other saveBlob implementations, if available\r\n                            var saveBlob = navigator.webkitSaveBlob || navigator.mozSaveBlob || navigator.saveBlob;\r\n                            if (saveBlob === undefined) throw \"Not supported\";\r\n                            saveBlob(blob, filename);\r\n                        }\r\n                        success = true;\r\n                    } catch (ex) {\r\n                        console.log(\"saveBlob method failed with the following exception:\");\r\n                        console.log(ex);\r\n                    }\r\n\r\n                    if (!success) {\r\n                        // Get the blob url creator\r\n                        var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                        if (urlCreator) {\r\n                            // Try to use a download link\r\n                            var link = document.createElement('a');\r\n                            if ('download' in link) {\r\n                                // Try to simulate a click\r\n                                try {\r\n                                    // Prepare a blob URL\r\n                                    let blob = new Blob([response.data], { type: contentType });\r\n                                    let url = urlCreator.createObjectURL(blob);\r\n                                    link.setAttribute('href', url);\r\n\r\n                                    // Set the download attribute (Supported in Chrome 14+ / Firefox 20+)\r\n                                    link.setAttribute(\"download\", filename);\r\n\r\n                                    // Simulate clicking the download link\r\n                                    var event = document.createEvent('MouseEvents');\r\n                                    event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n                                    link.dispatchEvent(event);\r\n                                    success = true;\r\n\r\n                                } catch (ex) {\r\n                                    console.log(\"Download link method with simulated click failed with the following exception:\");\r\n                                    console.log(ex);\r\n                                }\r\n                            }\r\n\r\n                            if (!success) {\r\n                                // Fallback to window.location method\r\n                                try {\r\n                                    // Prepare a blob URL\r\n                                    // Use application/octet-stream when using window.location to force download\r\n                                    let blob = new Blob([response.data], { type: octetStreamMime });\r\n                                    let url = urlCreator.createObjectURL(blob);\r\n                                    window.location = url;\r\n                                    success = true;\r\n                                } catch (ex) {\r\n                                    console.log(\"Download link method with window.location failed with the following exception:\");\r\n                                    console.log(ex);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    if (!success) {\r\n                        // Fallback to window.open method\r\n                        window.open(httpPath, '_blank', '');\r\n                    }\r\n\r\n                    return $q.resolve();\r\n\r\n                }, function (response) {\r\n\r\n                    return $q.reject({\r\n                        errorMsg: \"An error occurred downloading the file\",\r\n                        data: response.data,\r\n                        status: response.status\r\n                    });\r\n                });\r\n        }\r\n\r\n        function getFileName(headers) {\r\n            var disposition = headers[\"content-disposition\"];\r\n            if (disposition && disposition.indexOf('attachment') !== -1) {\r\n                var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\r\n                var matches = filenameRegex.exec(disposition);\r\n                if (matches != null && matches[1]) {\r\n                    return matches[1].replace(/['\"]/g, '');\r\n                }\r\n            }\r\n\r\n            return \"sync-pack.usync\";\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .factory('uSyncExporterService', uSyncExporterService);\r\n\r\n})();\r\n","(function () {\r\n\r\n    function exportOverlayController($scope, uSyncHub, uSyncExporterService) {\r\n\r\n        var vm = this;\r\n        vm.exporting = false; \r\n        vm.loading = true;\r\n        vm.valid = true;\r\n        vm.complete = false;\r\n\r\n        vm.update = {};\r\n\r\n        $scope.model.exported = false; \r\n        $scope.model.create = createExport; \r\n\r\n        vm.options = {\r\n            id: '00000000-0000-0000-0000-000000000000',\r\n            name: 'syncpack_' + moment().format('YYYY_MM_DD_hhmmss') ,\r\n            stepIndex: 0,\r\n            request: {\r\n                pageNumber: 0,\r\n                // fill in the request here...\r\n                items: [],\r\n                options: {\r\n                    removeOrphans: false,\r\n                    includeFiles: $scope.model.options.includeFiles,\r\n                    includeFileHash: false,\r\n                    includeSystemFiles: false,\r\n                    includeMediaFiles: $scope.model.options.includeMedia,\r\n                    // orphanTypes: [],\r\n                    // cultures: [],\r\n                    // attributes: []\r\n                },\r\n            },\r\n            clientId: getClientId()\r\n        };\r\n\r\n        vm.selection = $scope.model.options.selection;\r\n\r\n        getItems(vm.selection);\r\n\r\n        function getItems(selection) {\r\n\r\n            var items = prepItems(selection, $scope.model.options);\r\n\r\n            uSyncExporterService.getSyncItems(items)\r\n                .then(function (result) {\r\n                    vm.options.request.items = result.data;\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    console.log(error);\r\n                    vm.loading = false;\r\n                    vm.valid = false;\r\n                    $scope.model.hideSubmitButton = true;\r\n                    vm.error = error.data;\r\n                });\r\n        }\r\n\r\n        function prepItems(selection, options) {\r\n\r\n            var items = [];\r\n\r\n            for (let n = 0; n < selection.length; n++) {\r\n                items.push({\r\n                    id: selection[n].id,\r\n                    udi: selection[n].udi,\r\n                    name: selection[n].name,\r\n                    nodeType: selection[n].nodeType,\r\n                    entityType: selection[n].entityType,\r\n                    includeChildren: selection[n].flags.includeChildren,\r\n                    includeAncestors: selection[n].flags.includeAncestors,\r\n                    includeDependencies: selection[n].flags.includeDependencies,\r\n                    includeMedia: options.includeMedia,\r\n                    includeConfig: options.includeConfig,\r\n                    includeLinked: options.includeLinked,\r\n                    includeViews: options.includeFiles\r\n                });\r\n            }\r\n\r\n            if (options.includeDictionary) {\r\n                items.push({\r\n                    id: -1,\r\n                    udi: 'umb://dictionary-item/00000000-0000-0000-0000-000000000000',\r\n                    includeChildren: true,\r\n                    name: 'All dictionary items'\r\n                });\r\n            }\r\n         \r\n            return items;\r\n\r\n        }\r\n\r\n        function createExport() {\r\n\r\n            $scope.model.disableSubmitButton = true;\r\n            $scope.model.submitButtonState = 'busy';\r\n\r\n            vm.exporting = true;\r\n\r\n            processExport();\r\n        }\r\n\r\n        function processExport () {\r\n\r\n            vm.options.clientId = getClientId();\r\n\r\n            uSyncExporterService.createExport(vm.options)\r\n                .then(function (result) {\r\n\r\n                    var response = result.data;\r\n                    vm.options.id = response.id;\r\n\r\n                    vm.options.request.items = response.response.items;\r\n                    vm.progress = response.progress;\r\n\r\n                    if (response.exportComplete) {\r\n                        getExport();\r\n                    }\r\n                    else {\r\n                        vm.options.stepIndex = response.stepIndex;\r\n                        vm.options.request.pageNumber = response.nextPage;\r\n                        processExport();\r\n                    }\r\n                });\r\n        }\r\n\r\n        function getExport() {\r\n\r\n            vm.update.Message = \"Compressing `Sync-Pack'\";\r\n\r\n            uSyncExporterService.getExport(vm.options)\r\n                .then(function (result) {\r\n                    $scope.model.hideSubmitButton = true;\r\n                    $scope.model.closeButtonLabel = 'Done';\r\n                    vm.update.Count = 100;\r\n                    vm.update.Total = 100;\r\n                    vm.exporting = false;\r\n                    vm.complete = true; \r\n                });\r\n        }\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(update) {\r\n            if (update != null && update != undefined) {\r\n                return (update.count / update.total) * 100;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n\r\n        //////// SignalR\r\n        initSignalRHub();\r\n\r\n        function initSignalRHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                    vm.update.blocks = update.message.split('||');\r\n                    console.log(vm.update);\r\n                });\r\n\r\n                vm.hub.on('add', function (status) {\r\n                    vm.status = status;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExportOverlayController', exportOverlayController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function importController($scope,\r\n        navigationService,\r\n        notificationsService, uSyncExporterService,\r\n        Upload,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n\r\n        vm.buttonState = 'init';\r\n\r\n        vm.importGroup = {\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: function () {\r\n                    vm.importPack(vm.importId, false);\r\n                }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_importforce',\r\n                handler: function () {\r\n                    vm.importPack(vm.importId, true);\r\n                }\r\n            }]\r\n        };\r\n\r\n        vm.options = {};\r\n\r\n        vm.close = close;\r\n        vm.handleFiles = handleFiles;\r\n\r\n        vm.upload = upload;\r\n        vm.importPack = importPack;\r\n        vm.reportPack = reportPack;\r\n\r\n        vm.countChanges = countChanges;\r\n\r\n        vm.file = null;\r\n        vm.report = [];\r\n\r\n        vm.state = 'init';\r\n\r\n        vm.imported = false;\r\n        vm.running = false;\r\n        vm.uploaded = false;\r\n\r\n        vm.update = {\r\n            Message: 'Importing',\r\n            Count: 1,\r\n            Total: 1\r\n        };\r\n\r\n        // signalR\r\n        InitHub();\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.getTypeName = getTypeName;\r\n\r\n        /////////////////////////////////\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n            else {\r\n                navigationService.hideDialog();\r\n            }\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.Change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        ///// file managent \r\n\r\n        function handleFiles(files, event) {\r\n            if (files && files.length > 0) {\r\n                vm.file = files[0];\r\n                // vm.upload(files[0]);\r\n            }\r\n        }\r\n\r\n        function upload(file) {\r\n            vm.buttonState = 'busy';\r\n            vm.running = true;\r\n            vm.uploaded = false;\r\n\r\n            Upload.upload({\r\n                url: Umbraco.Sys.ServerVariables.uSync.exporterService + 'UploadFile',\r\n                fields: {\r\n                    clientId: getClientId()\r\n                },\r\n                file: file\r\n            }).success(function (data, status, headers, config) {\r\n                vm.buttonState = 'success';\r\n                vm.running = false;\r\n                vm.uploaded = true;\r\n                vm.importId = data.id;\r\n\r\n                initOptions();\r\n\r\n                reportPack();\r\n\r\n            }).error(function (evt, status, headers, config) {\r\n                vm.running = false;\r\n                vm.buttonState = 'error';\r\n                notificationsService.error('error', getError(error.data));\r\n            });\r\n        }\r\n\r\n        function reportPack() {\r\n\r\n            vm.state = 'busy';\r\n\r\n            uSyncExporterService.reportPack(vm.options)\r\n                .then(function (result) {\r\n\r\n                    var response = result.data;\r\n                    vm.options.id = response.id;\r\n\r\n                    vm.progress = response.progress;\r\n\r\n                    if (!response.response.success) {\r\n                        vm.state = 'error';\r\n                        vm.errorMessage = response.response.message\r\n                    }\r\n                    else {\r\n\r\n                        updateActions(response);\r\n\r\n                        if (response.exportComplete) {\r\n                            // show report\r\n                            vm.state = 'report';\r\n                        }\r\n                        else {\r\n                            vm.options.stepIndex = response.stepIndex;\r\n                            vm.options.request.pageNumber = response.nextPage;\r\n                            vm.options.request.handlerFolder = response.nextFolder;\r\n                            reportPack();\r\n                        }\r\n                    }\r\n                }, function (error) {\r\n                    handleError(error);\r\n                });\r\n        }\r\n\r\n        function handleError(error) {\r\n            vm.running = false;\r\n            vm.progress.steps[vm.progress.currentStepIndex].status = 'Error';\r\n            vm.buttonState = 'error';\r\n            vm.showError = true;\r\n            vm.errorMessage = getError(error.data);\r\n            console.log(error);\r\n            notificationsService.error('error', vm.errorMessage);\r\n        }\r\n\r\n        function getError(error) {\r\n            // errors can change case depending on global settings.\r\n            var key = Object.keys(error).find(k => k.toLowerCase() === 'exceptionmessage');\r\n            if (key !== undefined) {\r\n                return error[key];\r\n            }\r\n        }\r\n\r\n        function importPack() {\r\n            initOptions();\r\n            processImport();\r\n        }\r\n\r\n        function processImport() {\r\n\r\n            vm.state = 'busy';\r\n            uSyncExporterService.importPack(vm.options)\r\n                .then(function (result) {\r\n\r\n                    var response = result.data;\r\n                    vm.options.id = response.id;\r\n\r\n                    vm.progress = response.progress;\r\n\r\n                    updateActions(response);\r\n\r\n                    if (response.exportComplete) {\r\n                        // show report\r\n                        vm.state = 'imported';\r\n                    }\r\n                    else {\r\n                        vm.options.stepIndex = response.stepIndex;\r\n                        vm.options.request.pageNumber = response.nextPage;\r\n                        vm.options.request.handlerFolder = response.nextFolder;\r\n                        processImport();\r\n                    }\r\n                }, function (error) {\r\n                    handleError(error);\r\n                });\r\n        }\r\n\r\n        function updateActions(response) {\r\n            if (response != null && response.response != null) {\r\n            var actions = response.response.actions;\r\n                if (actions !== undefined && actions !== null && actions.length > 0) {\r\n                    vm.report = actions;\r\n                }\r\n            }\r\n        }\r\n\r\n        function initOptions() {\r\n\r\n            vm.options = {\r\n                id: vm.importId,\r\n                stepIndex: 0,\r\n                request: {\r\n                    pageNumber: 0,\r\n                },\r\n                clientId: getClientId()\r\n            }\r\n        }\r\n\r\n        ////// SignalR things \r\n            \r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExporterImportController', importController);\r\n})();","(function () {\r\n\r\n    var syncOptionsComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSyncExporter/components/itemoptions.html',\r\n        controllerAs: 'vm',\r\n        controller: syncOptionsController,\r\n        bindings: {\r\n            options: '=',\r\n            hideDecendants: '<',\r\n            hideFiles: '<'\r\n        }\r\n    };\r\n\r\n    function syncOptionsController() {\r\n        var vm = this;\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncExportSyncOptions', syncOptionsComponent);\r\n\r\n\r\n})();"]}